{"version":3,"sources":["webpack://MyLibrary/webpack/universalModuleDefinition","webpack://MyLibrary/./node_modules/@multiformats/base-x/src/index.js","webpack://MyLibrary/./node_modules/cids/src/cid-util.js","webpack://MyLibrary/./node_modules/cids/src/index.js","webpack://MyLibrary/./node_modules/err-code/index.js","webpack://MyLibrary/./node_modules/is-ip/index.js","webpack://MyLibrary/./node_modules/is-ip/node_modules/ip-regex/index.js","webpack://MyLibrary/./node_modules/is-ipfs/src/index.js","webpack://MyLibrary/./node_modules/iso-url/index.js","webpack://MyLibrary/./node_modules/iso-url/src/relative.js","webpack://MyLibrary/./node_modules/iso-url/src/url-browser.js","webpack://MyLibrary/./node_modules/mafmt/src/index.js","webpack://MyLibrary/./node_modules/multiaddr/node_modules/varint/decode.js","webpack://MyLibrary/./node_modules/multiaddr/node_modules/varint/encode.js","webpack://MyLibrary/./node_modules/multiaddr/node_modules/varint/index.js","webpack://MyLibrary/./node_modules/multiaddr/node_modules/varint/length.js","webpack://MyLibrary/./node_modules/multiaddr/src/codec.js","webpack://MyLibrary/./node_modules/multiaddr/src/convert.js","webpack://MyLibrary/./node_modules/multiaddr/src/index.js","webpack://MyLibrary/./node_modules/multiaddr/src/ip.js","webpack://MyLibrary/./node_modules/multiaddr/src/protocols-table.js","webpack://MyLibrary/./node_modules/multibase/src/base.js","webpack://MyLibrary/./node_modules/multibase/src/constants.js","webpack://MyLibrary/./node_modules/multibase/src/index.js","webpack://MyLibrary/./node_modules/multibase/src/rfc4648.js","webpack://MyLibrary/./node_modules/multibase/src/util.js","webpack://MyLibrary/./node_modules/multicodec/src/generated-table.js","webpack://MyLibrary/./node_modules/multicodec/src/index.js","webpack://MyLibrary/./node_modules/multicodec/src/maps.js","webpack://MyLibrary/./node_modules/multicodec/src/util.js","webpack://MyLibrary/./node_modules/multihashes/src/constants.js","webpack://MyLibrary/./node_modules/multihashes/src/index.js","webpack://MyLibrary/./node_modules/uint8arrays/concat.js","webpack://MyLibrary/./node_modules/uint8arrays/equals.js","webpack://MyLibrary/./node_modules/uint8arrays/from-string.js","webpack://MyLibrary/./node_modules/uint8arrays/to-string.js","webpack://MyLibrary/./node_modules/varint/decode.js","webpack://MyLibrary/./node_modules/varint/encode.js","webpack://MyLibrary/./node_modules/varint/index.js","webpack://MyLibrary/./node_modules/varint/length.js","webpack://MyLibrary/webpack/bootstrap","webpack://MyLibrary/webpack/runtime/compat get default export","webpack://MyLibrary/webpack/runtime/define property getters","webpack://MyLibrary/webpack/runtime/hasOwnProperty shorthand","webpack://MyLibrary/webpack/runtime/make namespace object","webpack://MyLibrary/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","Error","it4","vch","encode","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","mh","CIDUtil","checkCIDComponents","other","version","codec","multibaseName","multihash","validate","err","errorMsg","message","multibase","multicodec","uint8ArrayConcat","uint8ArrayToString","uint8ArrayEquals","codecs","nameToCode","codecInts","Object","keys","reduce","p","name","symbol","Symbol","for","CID","this","defineProperty","value","isCID","cid","baseName","isEncoded","parseInt","toString","getCodec","slice","rmPrefix","fromB58String","validateCID","v","bytes","_bytes","getCodeVarint","prefix","base","toB58String","toBaseEncodedString","hash","Boolean","assign","obj","props","key","enumerable","configurable","code","_","stack","ErrClass","prototype","create","getPrototypeOf","ipRegex","isIp","exact","test","v4","v6","undefined","word","b","options","includeBoundaries","v6seg","replace","trim","v46Exact","RegExp","v4exact","v6exact","ip","Multiaddr","mafmt","URL","pathGatewayPattern","pathPattern","subdomainGatewayPattern","fqdnWithTld","e","isMultiaddr","input","isIpfs","pattern","protocolMatch","hashMatch","formatted","convertToString","match","toLowerCase","isIpns","ipnsId","includes","hostname","isString","ipfsSubdomain","url","ipnsSubdomain","subdomain","ipfsUrl","ipnsUrl","path","multiaddr","peerMultiaddr","P2P","matches","base32cid","isMultibase","ipfsPath","ipnsPath","urlOrPath","cidPath","URLWithLegacySupport","format","URLSearchParams","defaultBase","relative","location","protocolMap","defaultProtocol","urlParsed","protocol","host","isReactNative","navigator","product","super","pathname","search","auth","username","password","query","startsWith","href","origin","port","searchParams","o","createObjectURL","revokeObjectURL","toJSON","userPass","DNS4","DNS6","DNSADDR","DNS","or","IP","TCP","and","UDP","UTP","QUIC","WebSockets","WebSocketsSecure","HTTP","HTTPS","WebRTCStar","WebSocketStar","WebRTCDirect","Reliable","Stardust","_P2P","_Circuit","CircuitRecursive","Circuit","makeMatchesFunction","partialMatch","a","out","protoNames","args","some","arg","join","res","n","pnames","protos","IPFS","read","buf","offset","shift","counter","l","RangeError","pow","num","Number","MAX_SAFE_INTEGER","oldOffset","INT","encodingLength","N1","N2","N3","N4","N5","N6","N7","N8","N9","convert","protocols","varint","stringToStringTuples","tuples","parts","split","part","proto","ParseError","push","cleanPath","stringTuplesToString","map","tup","protoFromTuple","stringTuplesToTuples","toBytes","tuplesToStringTuples","tuplesToBytes","fromBytes","sizeForAddr","addr","bytesToTuples","stringToBytes","validateBytes","filter","bytesToString","fromString","isValidBytes","uint8ArrayFromString","Convert","ip2bytes","ipString","isIP","port2bytes","DataView","setUint16","bytes2port","getUint16","bytes2onion","addrBytes","portBytes","ipBuff","bytes2ip","bytes2str","address","bytes2mh","str2bytes","mh2bytes","portBuf","onion2bytes","onion32bytes","errCode","inspect","resolvers","Map","opts","parsed","family","transport","protoCodes","codes","t","addrString","s","lastIndexOf","tuple","stringTuples","names","ipfs","pop","resolvableProto","find","resolvable","resolver","get","isV4","isV6","buff","result","byte","sections","v4Buffer","splice","unshift","argv","apply","view","Protocols","V","lengthPrefixedVarSize","table","row","object","encodeText","alphabet","codeBuf","char","indexOf","baseX","Base","rfc4648","decodeText","constants","prev","tupple","concat","encoding","nameOrCode","hasOwnProperty","call","validEncode","enc","data","substring","encodingFromData","freeze","bitsPerChar","pad","mask","bits","end","written","SyntaxError","textDecoder","TextDecoder","textEncoder","TextEncoder","text","arrs","output","arr","set","baseTable","util","nameToVarint","constantToCode","codeToName","getNameFromData","prefixedData","getNameFromCode","getCodeFromName","getCodeFromData","getVarintFromName","getVarintFromCode","varintEncode","addPrefix","multicodecStrOrCode","varintUint8ArrayEncode","getName","getNumber","getCode","getVarint","codecName","toUpperCase","uint8ArrayToNumber","numberToUint8Array","hexString","isValidCode","len","digest","coerceCode","isAppCode","toHexString","fromHexString","encoded","hashfn","subarray","arrays","acc","curr","utf8Encoder","array","asciiStringToUint8Array","utf8Decoder","String","fromCharCode","uint8ArrayToAsciiString","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","definition","prop","r","toStringTag","isIPFS","containsCid","sourceUrl","desiredGatewayPrefix","results","containsCID","splitUrl"],"mappings":"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ACd,aAAc,KACd,IAAO,KACP,WAAY,KACZ,WAAY,KACZ,WAAY,KACZ,YAAa,KACb,WAAY,KACZ,eAAgB,KAChB,eAAkB,KAClB,UAAW,MACX,YAAa,MACb,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,YAAa,MACb,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,aAAc,MACd,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,aAAc,MACd,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,cAAe,MACf,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,KACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB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ACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,aAAc,MACd,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,aAAc,MACd,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,cAAe,MACf,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,cAAe,MACf,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,KACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,iBAAkB,MAClB,iBAAkB,MAClB,iBAAkB,MAClB,iBAAkB,MAClB,4BAA6B,MAC7B,+BAAgC,QAGlChY,EAAOD,QAAU,CAAEiV,U,2BC9WnB,MAAMlR,EAAY,EAAQ,KACpB+M,EAAS,EAAQ,MACjB,MAAEmE,GAAU,EAAQ,KACpB/Q,EAAqB,EAAQ,IAC7BwO,EAAuB,EAAQ,KAC/BzO,EAAmB,EAAQ,KAE3ByQ,EAAoD,GAG1D,IAAK,MAAM/N,KAAOsO,EAAO,CACvB,MAAMtQ,EAA8B,EACpC+P,EAAMO,EAAMtQ,IAASA,EA8DvB,SAAS1B,EAAQ8C,GACf,KAAMA,aAAiBtF,YACrB,MAAM,IAAIqB,MAAM,kCAGlB,GAAIiE,EAAMzF,OAAS,EACjB,MAAM,IAAIwB,MAAM,2CAGlB,MAAMgF,EAA+BgK,EAAO7N,OAAO8C,GACnD,IAAK4U,EAAY7T,GACf,MAAM,IAAIhF,MAAM,sCAAsCgF,EAAKtB,SAAS,OAEtEO,EAAQA,EAAML,MAAMoL,EAAO7N,OAAO8C,OAElC,MAAM6U,EAAM9J,EAAO7N,OAAO8C,GAC1B,GAAI6U,EAAM,EACR,MAAM,IAAI9Y,MAAM,6BAA6B8Y,KAI/C,IAFA7U,EAAQA,EAAML,MAAMoL,EAAO7N,OAAO8C,QAExBzF,SAAWsa,EACnB,MAAM,IAAI9Y,MAAM,oCAAoCoC,EAAmB6B,EAAO,aAGhF,MAAO,CACLe,OACAnC,KAAM+P,EAAM5N,GACZxG,OAAQsa,EACRC,OAAQ9U,GA8CZ,SAAS+U,EAAYnW,GACnB,IAAImC,EAAOnC,EAEX,GAAoB,iBAATA,EAAmB,CAC5B,QAAoBgD,IAAhBsN,EAAMtQ,GACR,MAAM,IAAI7C,MAAM,qCAAqC6C,KAEvDmC,EAAOmO,EAAMtQ,GAGf,GAAoB,iBAATmC,EACT,MAAM,IAAIhF,MAAM,+CAA+CgF,KAIjE,QAAoBa,IAAhB+M,EAAM5N,KAAwBiU,EAAUjU,GAC1C,MAAM,IAAIhF,MAAM,+BAA+BgF,KAGjD,OAAOA,EAST,SAASiU,EAAWjU,GAClB,OAAOA,EAAO,GAAKA,EAAO,GAS5B,SAAS6T,EAAa7T,GACpB,QAAIiU,EAAUjU,MAIV4N,EAAM5N,GAcZ,SAASnD,EAAUD,GACjBT,EAAOS,GAjMTa,OAAO0T,OAAOvD,GAiNdzU,EAAOD,QAAU,CACfiV,QACAP,QACAsG,YA5MF,SAAsB1U,GACpB,KAAMA,aAAgB7F,YACpB,MAAM,IAAIqB,MAAM,+BAGlB,OAAOoC,EAAmBoC,EAAM,WAwMhC2U,cA/LF,SAAwB3U,GACtB,OAAOoM,EAAqBpM,EAAM,WA+LlCF,YAtLF,SAAsBE,GACpB,KAAMA,aAAgB7F,YACpB,MAAM,IAAIqB,MAAM,+BAGlB,OAAOoC,EAAmBH,EAAU9B,OAAO,YAAaqE,IAAOZ,MAAM,IAkLrEE,cAzKF,SAAwBU,GACtB,MAAM4U,EAAU5U,aAAgB7F,WAC5ByD,EAAmBoC,GACnBA,EAEJ,OAAOvC,EAAUd,OAAO,IAAMiY,IAqK9BjY,SACAhB,OAlHF,SAAiB4Y,EAAQ/T,EAAMxG,GAC7B,IAAKua,QAAmBlT,IAATb,EACb,MAAM,IAAIhF,MAAM,6DAIlB,MAAMqZ,EAASL,EAAWhU,GAE1B,KAAM+T,aAAkBpa,YACtB,MAAM,IAAIqB,MAAM,iCAOlB,GAJc,MAAVxB,IACFA,EAASua,EAAOva,QAGdA,GAAUua,EAAOva,SAAWA,EAC9B,MAAM,IAAIwB,MAAM,sDAGlB,MAAMwE,EAAOwK,EAAO7O,OAAOkZ,GACrBP,EAAM9J,EAAO7O,OAAO3B,GAC1B,OAAO2D,EAAiB,CAACqC,EAAMsU,EAAKC,GAASvU,EAAKhG,OAASsa,EAAIta,OAASua,EAAOva,SA6F/Ewa,aACAC,YACApX,WACAuC,OAlBF,SAAiBxC,GAGf,OAFAC,EAASD,GAEFA,EAAU0X,SAAS,EAAG,IAgB7BT,gB,qBCzNF1a,EAAOD,QAhBP,SAAiBqb,EAAQ/a,GAClBA,IACHA,EAAS+a,EAAO5W,QAAO,CAAC6W,EAAKC,IAASD,EAAMC,EAAKjb,QAAQ,IAG3D,MAAMyY,EAAS,IAAItY,WAAWH,GAC9B,IAAIiP,EAAS,EAEb,IAAK,MAAMyJ,KAAOqC,EAChBtC,EAAOE,IAAID,EAAKzJ,GAChBA,GAAUyJ,EAAI1Y,OAGhB,OAAOyY,I,qBCKT9Y,EAAOD,QAlBP,SAAiByO,EAAG5G,GAClB,GAAI4G,IAAM5G,EACR,OAAO,EAGT,GAAI4G,EAAEnM,aAAeuF,EAAEvF,WACrB,OAAO,EAGT,IAAK,IAAI3B,EAAI,EAAGA,EAAI8N,EAAEnM,WAAY3B,IAChC,GAAI8N,EAAE9N,KAAOkH,EAAElH,GACb,OAAO,EAIX,OAAO,I,2BCrBT,MAAQ6W,SAAU/R,GAAa,EAAQ,KACjC+V,EAAc,IAAI5C,YA6CxB3Y,EAAOD,QAZP,SAAqBkD,EAAQsU,EAAW,QACtC,MAAiB,SAAbA,GAAoC,UAAbA,EAClBgE,EAAYvZ,OAAOiB,GAGX,UAAbsU,EA1BN,SAAkCtU,GAChC,MAAMuY,EAAQ,IAAIhb,WAAWyC,EAAO5C,QAEpC,IAAK,IAAIK,EAAI,EAAGA,EAAIuC,EAAO5C,OAAQK,IACjC8a,EAAM9a,GAAKuC,EAAOnC,WAAWJ,GAG/B,OAAO8a,EAoBEC,CAAwBxY,GAG1BuC,EAAS+R,GAAUvU,OAAOC,K,0BC3CnC,MAAQsU,SAAU/R,GAAa,EAAQ,KACjCkW,EAAc,IAAIjD,YAAY,QA4CpCzY,EAAOD,QAZP,SAAmByb,EAAOjE,EAAW,QACnC,MAAiB,SAAbA,GAAoC,UAAbA,EAClBmE,EAAY1Y,OAAOwY,GAGX,UAAbjE,EAzBN,SAAkCiE,GAChC,IAAIvY,EAAS,GAEb,IAAK,IAAIvC,EAAI,EAAGA,EAAI8a,EAAMnb,OAAQK,IAChCuC,GAAU0Y,OAAOC,aAAaJ,EAAM9a,IAEtC,OAAOuC,EAoBE4Y,CAAwBL,GAG1BhW,EAAS+R,GAAUvV,OAAOwZ,K,QC5CnCxb,EAAOD,QAKP,SAASqP,EAAKC,EAAKC,GACjB,IAII1H,EAJAmH,EAAS,EAETQ,EAAS,EACTC,EAFAF,EAASA,GAAU,EAInBG,EAAIJ,EAAIhP,OAEZ,EAAG,CACD,GAAImP,GAAWC,EAEb,MADAL,EAAKtJ,MAAQ,EACP,IAAI4J,WAAW,2BAEvB9H,EAAIyH,EAAIG,KACRT,GAAOQ,EAAQ,IAhBR,IAiBF3H,IAAa2H,GAjBX,IAkBF3H,GAAY1G,KAAKyO,IAAI,EAAGJ,GAC7BA,GAAS,QACF3H,GArBD,KAyBR,OAFAwH,EAAKtJ,MAAQ0J,EAAUF,EAEhBP,I,QC3BT/O,EAAOD,QAOP,SAASiC,EAAO4N,EAAKnB,EAAKa,GACxBb,EAAMA,GAAO,GAEb,IAAIsB,EADJT,EAASA,GAAU,EAGnB,KAAMM,GAAOI,GACXvB,EAAIa,KAAmB,IAANM,EAXX,IAYNA,GAAO,IAET,MAZW,IAYLA,GACJnB,EAAIa,KAAmB,IAANM,EAfX,IAgBNA,KAAS,EAMX,OAJAnB,EAAIa,GAAgB,EAANM,EAEd5N,EAAO8D,MAAQwJ,EAASS,EAAY,EAE7BtB,GAtBT,IAGIuB,EAAM9O,KAAKyO,IAAI,EAAG,K,cCLtB3P,EAAOD,QAAU,CACbiC,OAAQ,EAAQ,KAChBgB,OAAQ,EAAQ,KAChBiN,eAAgB,EAAQ,M,OCF5B,IAAIC,EAAKhP,KAAKyO,IAAI,EAAI,GAClBQ,EAAKjP,KAAKyO,IAAI,EAAG,IACjBS,EAAKlP,KAAKyO,IAAI,EAAG,IACjBU,EAAKnP,KAAKyO,IAAI,EAAG,IACjBW,EAAKpP,KAAKyO,IAAI,EAAG,IACjBY,EAAKrP,KAAKyO,IAAI,EAAG,IACjBa,EAAKtP,KAAKyO,IAAI,EAAG,IACjBc,EAAKvP,KAAKyO,IAAI,EAAG,IACjBe,EAAKxP,KAAKyO,IAAI,EAAG,IAErB3P,EAAOD,QAAU,SAAUkF,GACzB,OACEA,EAAQiL,EAAK,EACbjL,EAAQkL,EAAK,EACblL,EAAQmL,EAAK,EACbnL,EAAQoL,EAAK,EACbpL,EAAQqL,EAAK,EACbrL,EAAQsL,EAAK,EACbtL,EAAQuL,EAAK,EACbvL,EAAQwL,EAAK,EACbxL,EAAQyL,EAAK,EACA,MCrBboL,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBtU,IAAjBuU,EACH,OAAOA,EAAalc,QAGrB,IAAIC,EAAS8b,EAAyBE,GAAY,CAGjDjc,QAAS,IAOV,OAHAmc,EAAoBF,GAAUhc,EAAQA,EAAOD,QAASgc,GAG/C/b,EAAOD,QCpBfgc,EAAoB/M,EAAKhP,IACxB,IAAImc,EAASnc,GAAUA,EAAOoc,WAC7B,IAAOpc,EAAiB,QACxB,IAAM,EAEP,OADA+b,EAAoBM,EAAEF,EAAQ,CAAE3N,EAAG2N,IAC5BA,GCLRJ,EAAoBM,EAAI,CAACtc,EAASuc,KACjC,IAAI,IAAI5V,KAAO4V,EACXP,EAAoBtP,EAAE6P,EAAY5V,KAASqV,EAAoBtP,EAAE1M,EAAS2G,IAC5EpC,OAAOU,eAAejF,EAAS2G,EAAK,CAAEC,YAAY,EAAM4O,IAAK+G,EAAW5V,MCJ3EqV,EAAoBtP,EAAI,CAACjG,EAAK+V,IAAUjY,OAAO2C,UAAUwQ,eAAeC,KAAKlR,EAAK+V,GCClFR,EAAoBS,EAAKzc,IACH,oBAAX6E,QAA0BA,OAAO6X,aAC1CnY,OAAOU,eAAejF,EAAS6E,OAAO6X,YAAa,CAAExX,MAAO,WAE7DX,OAAOU,eAAejF,EAAS,aAAc,CAAEkF,OAAO,K,kuCCiDvD,QAnDE,aAAc,Y,4FAAA,+BAEA,SAAC8E,GACb,GAAmB,iBAARA,EACT,MAAM,IAAIlI,MAAM,qBAElB,IAJqB,MAIJkI,EAAIkH,MAAM,MAJN,IAKrB,2BAA8B,KAAnBA,EAAmB,QAC5B,GAAIyL,QAAWzL,GACb,MAAO,CACL0L,aAAa,EACbxX,IAAK8L,IATU,8BAarB,MAAO,CACL0L,aAAa,EACbxX,IAAK,SAjBK,kCAsBY,SAACyX,EAAWC,GACpC,IAAMC,EAAU,EAAKC,YAAYH,GACjC,IAA4B,IAAxBE,EAAQH,YACV,MAAM,IAAI9a,MAAM,4BAGlB,IAAMmb,EAAWJ,EAAU3L,MAAM6L,EAAQ3X,KAEzC,GAAIyX,EAAUjT,SAAV,iBAA6BmT,EAAQ3X,MACvC,gBAAU0X,EAAV,iBAAuCC,EAAQ3X,KAA/C,OAAqD6X,EAAS,IAIhE,GAAIJ,EAAUjT,SAAV,gBAA4BmT,EAAQ3X,MACtC,gBAAU0X,EAAV,iBAAuCC,EAAQ3X,KAA/C,OAAqD6X,EAAS,IAIhE,GAAIJ,EAAUjT,SAAV,gBAA4BmT,EAAQ3X,MACtC,gBAAU0X,EAAV,iBAAuCC,EAAQ3X,KAA/C,OAAqD6X,EAAS,IAIhE,MAAM,IAAInb,MACR,oF","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MyLibrary\"] = factory();\n\telse\n\t\troot[\"MyLibrary\"] = factory();\n})(self, function() {\nreturn ","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict'\n\nconst mh = require('multihashes')\n\nconst CIDUtil = {\n  /**\n   * Test if the given input is a valid CID object.\n   * Returns an error message if it is not.\n   * Returns undefined if it is a valid CID.\n   *\n   * @param {any} other\n   * @returns {string|undefined}\n   */\n  checkCIDComponents: function (other) {\n    if (other == null) {\n      return 'null values are not valid CIDs'\n    }\n\n    if (!(other.version === 0 || other.version === 1)) {\n      return 'Invalid version, must be a number equal to 1 or 0'\n    }\n\n    if (typeof other.codec !== 'string') {\n      return 'codec must be string'\n    }\n\n    if (other.version === 0) {\n      if (other.codec !== 'dag-pb') {\n        return \"codec must be 'dag-pb' for CIDv0\"\n      }\n      if (other.multibaseName !== 'base58btc') {\n        return \"multibaseName must be 'base58btc' for CIDv0\"\n      }\n    }\n\n    if (!(other.multihash instanceof Uint8Array)) {\n      return 'multihash must be a Uint8Array'\n    }\n\n    try {\n      mh.validate(other.multihash)\n    } catch (err) {\n      let errorMsg = err.message\n      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message\n        errorMsg = 'Multihash validation failed'\n      }\n      return errorMsg\n    }\n  }\n}\n\nmodule.exports = CIDUtil\n","'use strict'\n\nconst mh = require('multihashes')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst CIDUtil = require('./cid-util')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayEquals = require('uint8arrays/equals')\n\nconst codecs = multicodec.nameToCode\nconst codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {\n  p[codecs[name]] = name\n  return p\n}, /** @type {Record<CodecCode, CodecName>} */({}))\n\nconst symbol = Symbol.for('@ipld/js-cid/CID')\n\n/**\n * @typedef {Object} SerializedCID\n * @property {string} codec\n * @property {number} version\n * @property {Uint8Array} hash\n */\n/**\n * @typedef {0|1} CIDVersion\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('multicodec').CodecCode} CodecCode\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n *\n * @class CID\n */\nclass CID {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (cid)\n   *   -> create a copy\n   * else if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Uint8Array)\n   *   if (1st byte is 0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   * ```\n   *\n   * @param {CIDVersion | string | Uint8Array | CID} version\n   * @param {string|number} [codec]\n   * @param {Uint8Array} [multihash]\n   * @param {string} [multibaseName]\n   *\n   * @example\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\n   * new CID(<cidStr>)\n   * new CID(<cid.bytes>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   */\n  constructor (version, codec, multihash, multibaseName) {\n    // We have below three blank field accessors only because\n    // otherwise TS will not pick them up if done after assignemnts\n\n    /**\n     * The version of the CID.\n     *\n     * @type {CIDVersion}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.version\n\n    /**\n     * The codec of the CID.\n     *\n     * @deprecated\n     * @type {CodecName}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.codec\n\n    /**\n     * The multihash of the CID.\n     *\n     * @type {Uint8Array}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.multihash\n\n    Object.defineProperty(this, symbol, { value: true })\n    if (CID.isCID(version)) {\n      // version is an exising CID instance\n      const cid = /** @type {CID} */(version)\n      this.version = cid.version\n      this.codec = cid.codec\n      this.multihash = cid.multihash\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\n      // @ts-ignore\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\n      return\n    }\n\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      const baseName = multibase.isEncoded(version)\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        const cid = multibase.decode(version)\n        this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16))\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = baseName\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = mh.fromB58String(version)\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      Object.defineProperty(this, 'string', { value: version })\n      return\n    }\n\n    if (version instanceof Uint8Array) {\n      const v = parseInt(version[0].toString(), 16)\n      if (v === 1) {\n        // version is a CID Uint8Array\n        const cid = version\n        this.version = v\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = 'base32'\n      } else {\n        // version is a raw multihash Uint8Array, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = version\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      return\n    }\n\n    // otherwise, assemble the CID from the parameters\n\n    this.version = version\n\n    if (typeof codec === 'number') {\n      // @ts-ignore\n      codec = codecInts[codec]\n    }\n\n    this.codec = /** @type {CodecName} */ (codec)\n\n    this.multihash = /** @type {Uint8Array} */ (multihash)\n\n    /**\n     * Multibase name as string.\n     *\n     * @deprecated\n     * @type {string}\n     */\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\n\n    CID.validateCID(this)\n  }\n\n  /**\n   * The CID as a `Uint8Array`\n   *\n   * @returns {Uint8Array}\n   *\n   */\n  get bytes () {\n    // @ts-ignore\n    let bytes = this._bytes\n\n    if (!bytes) {\n      if (this.version === 0) {\n        bytes = this.multihash\n      } else if (this.version === 1) {\n        const codec = multicodec.getCodeVarint(this.codec)\n        bytes = uint8ArrayConcat([\n          [1], codec, this.multihash\n        ], 1 + codec.byteLength + this.multihash.byteLength)\n      } else {\n        throw new Error('unsupported version')\n      }\n\n      // Cache this Uint8Array so it doesn't have to be recreated\n      Object.defineProperty(this, '_bytes', { value: bytes })\n    }\n\n    return bytes\n  }\n\n  /**\n   * The prefix of the CID.\n   *\n   * @returns {Uint8Array}\n   */\n  get prefix () {\n    const codec = multicodec.getCodeVarint(this.codec)\n    const multihash = mh.prefix(this.multihash)\n    const prefix = uint8ArrayConcat([\n      [this.version], codec, multihash\n    ], 1 + codec.byteLength + multihash.byteLength)\n\n    return prefix\n  }\n\n  /**\n   * The codec of the CID in its number form.\n   *\n   * @returns {CodecCode}\n   */\n  get code () {\n    return codecs[this.codec]\n  }\n\n  /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */\n  toV0 () {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n    }\n\n    const { name, length } = mh.decode(this.multihash)\n\n    if (name !== 'sha2-256') {\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n    }\n\n    if (length !== 32) {\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\n    }\n\n    return new CID(0, this.codec, this.multihash)\n  }\n\n  /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */\n  toV1 () {\n    return new CID(1, this.codec, this.multihash)\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toBaseEncodedString (base = this.multibaseName) {\n    // @ts-ignore non enumerable cache property\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n      // @ts-ignore non enumerable cache property\n      return this.string\n    }\n    let str\n    if (this.version === 0) {\n      if (base !== 'base58btc') {\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\n      }\n      str = mh.toB58String(this.multihash)\n    } else if (this.version === 1) {\n      str = uint8ArrayToString(multibase.encode(base, this.bytes))\n    } else {\n      throw new Error('unsupported version')\n    }\n    if (base === this.multibaseName) {\n      // cache the string value\n      Object.defineProperty(this, 'string', { value: str })\n    }\n    return str\n  }\n\n  /**\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\n   *\n   * @returns {string}\n   */\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return 'CID(' + this.toString() + ')'\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toString (base) {\n    return this.toBaseEncodedString(base)\n  }\n\n  /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */\n  toJSON () {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    }\n  }\n\n  /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {boolean}\n   */\n  equals (other) {\n    return this.codec === other.codec &&\n      this.version === other.version &&\n      uint8ArrayEquals(this.multihash, other.multihash)\n  }\n\n  /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other - The other CID.\n   * @returns {void}\n   */\n  static validateCID (other) {\n    const errorMsg = CIDUtil.checkCIDComponents(other)\n    if (errorMsg) {\n      throw new Error(errorMsg)\n    }\n  }\n\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is CID}\n   */\n  static isCID (value) {\n    return value instanceof CID || Boolean(value && value[symbol])\n  }\n}\n\nCID.codecs = codecs\n\nmodule.exports = CID\n","'use strict';\n\n/**\n * @typedef {{ [key: string]: any }} Extensions\n * @typedef {Error} Err\n * @property {string} message\n */\n\n/**\n *\n * @param {Error} obj\n * @param {Extensions} props\n * @returns {Error & Extensions}\n */\nfunction assign(obj, props) {\n    for (const key in props) {\n        Object.defineProperty(obj, key, {\n            value: props[key],\n            enumerable: true,\n            configurable: true,\n        });\n    }\n\n    return obj;\n}\n\n/**\n *\n * @param {any} err - An Error\n * @param {string|Extensions} code - A string code or props to set on the error\n * @param {Extensions} [props] - Props to set on the error\n * @returns {Error & Extensions}\n */\nfunction createError(err, code, props) {\n    if (!err || typeof err === 'string') {\n        throw new TypeError('Please pass an Error to err-code');\n    }\n\n    if (!props) {\n        props = {};\n    }\n\n    if (typeof code === 'object') {\n        props = code;\n        code = '';\n    }\n\n    if (code) {\n        props.code = code;\n    }\n\n    try {\n        return assign(err, props);\n    } catch (_) {\n        props.message = err.message;\n        props.stack = err.stack;\n\n        const ErrClass = function () {};\n\n        ErrClass.prototype = Object.create(Object.getPrototypeOf(err));\n\n        // @ts-ignore\n        const output = assign(new ErrClass(), props);\n\n        return output;\n    }\n}\n\nmodule.exports = createError;\n","'use strict';\nconst ipRegex = require('ip-regex');\n\nconst isIp = string => ipRegex({exact: true}).test(string);\nisIp.v4 = string => ipRegex.v4({exact: true}).test(string);\nisIp.v6 = string => ipRegex.v6({exact: true}).test(string);\nisIp.version = string => isIp(string) ? (isIp.v4(string) ? 4 : 6) : undefined;\n\nmodule.exports = isIp;\n","'use strict';\n\nconst word = '[a-fA-F\\\\d:]';\nconst b = options => options && options.includeBoundaries ?\n\t`(?:(?<=\\\\s|^)(?=${word})|(?<=${word})(?=\\\\s|$))` :\n\t'';\n\nconst v4 = '(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}';\n\nconst v6seg = '[a-fA-F\\\\d]{1,4}';\nconst v6 = `\n(?:\n(?:${v6seg}:){7}(?:${v6seg}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6seg}:){5}(?::${v4}|(?::${v6seg}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6seg}:){4}(?:(?::${v6seg}){0,1}:${v4}|(?::${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6seg}:){3}(?:(?::${v6seg}){0,2}:${v4}|(?::${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6seg}:){2}(?:(?::${v6seg}){0,3}:${v4}|(?::${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6seg}:){1}(?:(?::${v6seg}){0,4}:${v4}|(?::${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\\s*\\/\\/.*$/gm, '').replace(/\\n/g, '').trim();\n\n// Pre-compile only the exact regexes because adding a global flag make regexes stateful\nconst v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);\nconst v4exact = new RegExp(`^${v4}$`);\nconst v6exact = new RegExp(`^${v6}$`);\n\nconst ip = options => options && options.exact ?\n\tv46Exact :\n\tnew RegExp(`(?:${b(options)}${v4}${b(options)})|(?:${b(options)}${v6}${b(options)})`, 'g');\n\nip.v4 = options => options && options.exact ? v4exact : new RegExp(`${b(options)}${v4}${b(options)}`, 'g');\nip.v6 = options => options && options.exact ? v6exact : new RegExp(`${b(options)}${v6}${b(options)}`, 'g');\n\nmodule.exports = ip;\n","'use strict'\n\nconst multihash = require('multihashes')\nconst multibase = require('multibase')\nconst { Multiaddr } = require('multiaddr')\nconst mafmt = require('mafmt')\nconst CID = require('cids')\nconst { URL } = require('iso-url')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\nconst pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/\nconst pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 2\n\n// CID, libp2p-key or DNSLink\nconst subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/\nconst subdomainIdMatch = 1\nconst subdomainProtocolMatch = 2\n\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/\n\n/**\n * @param {*} hash\n */\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    multihash.decode(multibase.decode('z' + formatted))\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {*} hash\n */\nfunction isMultibase (hash) {\n  try {\n    return multibase.isEncoded(hash)\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {*} hash\n */\nfunction isCID (hash) {\n  try {\n    new CID(hash) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {*} input\n */\nfunction isMultiaddr (input) {\n  if (!input) return false\n  if (Multiaddr.isMultiaddr(input)) return true\n  try {\n    new Multiaddr(input) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr (input) {\n  return isMultiaddr(input) && mafmt.P2P.matches(input)\n}\n\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority component anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  let ipnsId = match[hashMatch]\n\n  if (ipnsId && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase()\n    // Check if it is cidv1\n    if (isCID(ipnsId)) return true\n    // Check if it looks like FQDN\n    try {\n      if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n        // name without tld, assuming its inlined into a single DNS label\n        // (https://github.com/ipfs/in-web-browsers/issues/169)\n        // en-wikipedia--on--ipfs-org → en.wikipedia-on-ipfs.org\n        ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-')\n      }\n      // URL implementation in web browsers forces lowercase of the hostname\n      const { hostname } = new URL(`http://${ipnsId}`) // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n      return fqdnWithTld.test(hostname)\n    } catch (e) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {any} input\n */\nfunction isString (input) {\n  return typeof input === 'string'\n}\n\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString (input) {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc')\n  }\n\n  if (isString(input)) {\n    return input\n  }\n\n  return false\n}\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url)\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst url = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url)\n\n/**\n * @param {string | Uint8Array} path\n */\nconst path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern)\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  /**\n   * @param {CID | string | Uint8Array} cid\n   */\n  base32cid: (cid) => (isMultibase(cid) === 'base32' && isCID(cid)),\n  ipfsSubdomain,\n  ipnsSubdomain,\n  subdomain,\n  subdomainGatewayPattern,\n  ipfsUrl,\n  ipnsUrl,\n  url,\n  pathGatewayPattern: pathGatewayPattern,\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path,\n  pathPattern,\n  /**\n   * @param {string | Uint8Array} x\n   */\n  urlOrPath: (x) => url(x) || path(x),\n  /**\n   * @param {string | Uint8Array | CID} path\n   */\n  cidPath: path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n}\n","'use strict'\n\nconst {\n  URLWithLegacySupport,\n  format,\n  URLSearchParams,\n  defaultBase\n} = require('./src/url')\nconst relative = require('./src/relative')\n\nmodule.exports = {\n  URL: URLWithLegacySupport,\n  URLSearchParams,\n  format,\n  relative,\n  defaultBase\n}\n","'use strict'\n\nconst { URLWithLegacySupport, format } = require('./url')\n\n/**\n * @param {string | undefined} url\n * @param {any} [location]\n * @param {any} [protocolMap]\n * @param {any} [defaultProtocol]\n */\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n  let protocol = location.protocol\n    ? location.protocol.replace(':', '')\n    : 'http'\n\n  // Check protocol map\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':'\n  let urlParsed\n\n  try {\n    urlParsed = new URLWithLegacySupport(url)\n  } catch (err) {\n    urlParsed = {}\n  }\n\n  const base = Object.assign({}, location, {\n    protocol: protocol || urlParsed.protocol,\n    host: location.host || urlParsed.host\n  })\n\n  return new URLWithLegacySupport(url, format(base)).toString()\n}\n","'use strict'\n\nconst isReactNative =\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative'\n\nfunction getDefaultBase () {\n  if (isReactNative) {\n    return 'http://localhost'\n  }\n\n  return self.location.protocol + '//' + self.location.host\n}\n\nconst URL = self.URL\nconst defaultBase = getDefaultBase()\n\nclass URLWithLegacySupport {\n  constructor (url = '', base = defaultBase) {\n    this.super = new URL(url, base)\n    this.path = this.pathname + this.search\n    this.auth =\n            this.username && this.password\n              ? this.username + ':' + this.password\n              : null\n\n    this.query =\n            this.search && this.search.startsWith('?')\n              ? this.search.slice(1)\n              : null\n  }\n\n  get hash () {\n    return this.super.hash\n  }\n\n  get host () {\n    return this.super.host\n  }\n\n  get hostname () {\n    return this.super.hostname\n  }\n\n  get href () {\n    return this.super.href\n  }\n\n  get origin () {\n    return this.super.origin\n  }\n\n  get password () {\n    return this.super.password\n  }\n\n  get pathname () {\n    return this.super.pathname\n  }\n\n  get port () {\n    return this.super.port\n  }\n\n  get protocol () {\n    return this.super.protocol\n  }\n\n  get search () {\n    return this.super.search\n  }\n\n  get searchParams () {\n    return this.super.searchParams\n  }\n\n  get username () {\n    return this.super.username\n  }\n\n  set hash (hash) {\n    this.super.hash = hash\n  }\n\n  set host (host) {\n    this.super.host = host\n  }\n\n  set hostname (hostname) {\n    this.super.hostname = hostname\n  }\n\n  set href (href) {\n    this.super.href = href\n  }\n\n  set password (password) {\n    this.super.password = password\n  }\n\n  set pathname (pathname) {\n    this.super.pathname = pathname\n  }\n\n  set port (port) {\n    this.super.port = port\n  }\n\n  set protocol (protocol) {\n    this.super.protocol = protocol\n  }\n\n  set search (search) {\n    this.super.search = search\n  }\n\n  set username (username) {\n    this.super.username = username\n  }\n\n  /**\n   * @param {any} o\n   */\n  static createObjectURL (o) {\n    return URL.createObjectURL(o)\n  }\n\n  /**\n   * @param {string} o\n   */\n  static revokeObjectURL (o) {\n    URL.revokeObjectURL(o)\n  }\n\n  toJSON () {\n    return this.super.toJSON()\n  }\n\n  toString () {\n    return this.super.toString()\n  }\n\n  format () {\n    return this.toString()\n  }\n}\n\n/**\n * @param {string | import('url').UrlObject} obj\n */\nfunction format (obj) {\n  if (typeof obj === 'string') {\n    const url = new URL(obj)\n\n    return url.toString()\n  }\n\n  if (!(obj instanceof URL)) {\n    const userPass =\n            // @ts-ignore its not supported in node but we normalise\n            obj.username && obj.password\n              // @ts-ignore its not supported in node but we normalise\n              ? `${obj.username}:${obj.password}@`\n              : ''\n    const auth = obj.auth ? obj.auth + '@' : ''\n    const port = obj.port ? ':' + obj.port : ''\n    const protocol = obj.protocol ? obj.protocol + '//' : ''\n    const host = obj.host || ''\n    const hostname = obj.hostname || ''\n    const search = obj.search || (obj.query ? '?' + obj.query : '')\n    const hash = obj.hash || ''\n    const pathname = obj.pathname || ''\n    // @ts-ignore - path is not supported in node but we normalise\n    const path = obj.path || pathname + search\n\n    return `${protocol}${userPass || auth}${\n            host || hostname + port\n        }${path}${hash}`\n  }\n}\n\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase,\n  format\n}\n","'use strict'\n\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @typedef {import('./types').MatchesFunction} MatchesFunction\n * @typedef {import('./types').PartialMatchesFunction} PartialMatchesFunction\n * @typedef {import('./types').Mafmt} Mafmt\n */\n\n/*\n * Valid combinations\n */\nconst DNS4 = base('dns4')\nconst DNS6 = base('dns6')\nconst DNSADDR = base('dnsaddr')\nconst DNS = or(\n  base('dns'),\n  DNSADDR,\n  DNS4,\n  DNS6\n)\n\nconst IP = or(base('ip4'), base('ip6'))\nconst TCP = or(\n  and(IP, base('tcp')),\n  and(DNS, base('tcp'))\n)\nconst UDP = and(IP, base('udp'))\nconst UTP = and(UDP, base('utp'))\n\nconst QUIC = and(UDP, base('quic'))\n\nconst WebSockets = or(\n  and(TCP, base('ws')),\n  and(DNS, base('ws'))\n)\n\nconst WebSocketsSecure = or(\n  and(TCP, base('wss')),\n  and(DNS, base('wss'))\n)\n\nconst HTTP = or(\n  and(TCP, base('http')),\n  and(IP, base('http')),\n  and(DNS, base('http'))\n)\n\nconst HTTPS = or(\n  and(TCP, base('https')),\n  and(IP, base('https')),\n  and(DNS, base('https'))\n)\n\nconst WebRTCStar = or(\n  and(WebSockets, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSockets, base('p2p-webrtc-star')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'))\n)\n\nconst WebSocketStar = or(\n  and(WebSockets, base('p2p-websocket-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')),\n  and(WebSockets, base('p2p-websocket-star')),\n  and(WebSocketsSecure, base('p2p-websocket-star'))\n)\n\nconst WebRTCDirect = or(\n  and(HTTP, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTPS, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTP, base('p2p-webrtc-direct')),\n  and(HTTPS, base('p2p-webrtc-direct'))\n)\n\nconst Reliable = or(\n  WebSockets,\n  WebSocketsSecure,\n  HTTP,\n  HTTPS,\n  WebRTCStar,\n  WebRTCDirect,\n  TCP,\n  UTP,\n  QUIC,\n  DNS\n)\n\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nconst Stardust = or(\n  and(Reliable, base('p2p-stardust'), base('p2p')),\n  and(Reliable, base('p2p-stardust'))\n)\n\nconst _P2P = or(\n  and(Reliable, base('p2p')),\n  WebRTCStar,\n  WebRTCDirect,\n  base('p2p')\n)\n\nconst _Circuit = or(\n  and(_P2P, base('p2p-circuit'), _P2P),\n  and(_P2P, base('p2p-circuit')),\n  and(base('p2p-circuit'), _P2P),\n  and(Reliable, base('p2p-circuit')),\n  and(base('p2p-circuit'), Reliable),\n  base('p2p-circuit')\n)\n\nconst CircuitRecursive = () => or(\n  and(_Circuit, CircuitRecursive),\n  _Circuit\n)\n\nconst Circuit = CircuitRecursive()\n\nconst P2P = or(\n  and(Circuit, _P2P, Circuit),\n  and(_P2P, Circuit),\n  and(Circuit, _P2P),\n  Circuit,\n  _P2P\n)\n\nmodule.exports = {\n  DNS,\n  DNS4,\n  DNS6,\n  DNSADDR,\n  IP,\n  TCP,\n  UDP,\n  QUIC,\n  UTP,\n  HTTP,\n  HTTPS,\n  WebSockets,\n  WebSocketsSecure,\n  WebSocketStar,\n  WebRTCStar,\n  WebRTCDirect,\n  Reliable,\n  Stardust,\n  Circuit,\n  P2P,\n  IPFS: P2P\n}\n\n/*\n * Validation funcs\n */\n\n/**\n * @param {PartialMatchesFunction} partialMatch\n */\nfunction makeMatchesFunction (partialMatch) {\n  /**\n   * @type {MatchesFunction}\n   */\n  function matches (a) {\n    if (!Multiaddr.isMultiaddr(a)) {\n      try {\n        a = new Multiaddr(a)\n      } catch (err) { // catch error\n        return false // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n    const out = partialMatch(a.protoNames())\n    if (out === null) {\n      return false\n    }\n\n    if (out === true || out === false) {\n      return out\n    }\n\n    return out.length === 0\n  }\n\n  return matches\n}\n\n/**\n * @param {Array<Mafmt | (() => Mafmt)>} args\n * @returns {Mafmt}\n */\nfunction and (...args) {\n  /**\n   * @type {PartialMatchesFunction}\n   */\n  function partialMatch (a) {\n    if (a.length < args.length) {\n      return null\n    }\n\n    /** @type {boolean | string[] | null} */\n    let out = a\n\n    args.some((arg) => {\n      out = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n\n      if (Array.isArray(out)) {\n        a = out\n      }\n\n      if (out === null) {\n        return true\n      }\n\n      return false\n    })\n\n    return out\n  }\n\n  return {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  }\n}\n\n/**\n * @param {Array<Mafmt | (() => Mafmt)>} args\n * @returns {Mafmt}\n */\nfunction or (...args) {\n  /**\n   * @type {PartialMatchesFunction}\n   */\n  function partialMatch (a) {\n    let out = null\n    args.some((arg) => {\n      const res = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n      if (res) {\n        out = res\n        return true\n      }\n      return false\n    })\n\n    return out\n  }\n\n  const result = {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  }\n\n  return result\n}\n\n/**\n * @param {string} n\n * @returns {Mafmt}\n */\nfunction base (n) {\n  const name = n\n\n  /**\n   * @type {MatchesFunction}\n   */\n  function matches (a) {\n    if (typeof a === 'string') {\n      try {\n        a = new Multiaddr(a)\n      } catch (err) { // catch error\n        return false // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n\n    const pnames = a.protoNames()\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * @type {PartialMatchesFunction}\n   */\n  function partialMatch (protos) {\n    if (protos.length === 0) {\n      return null\n    }\n\n    if (protos[0] === name) {\n      return protos.slice(1)\n    }\n    return null\n  }\n\n  return {\n    toString: function () { return name },\n    matches: matches,\n    partialMatch: partialMatch\n  }\n}\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","'use strict'\n\nconst convert = require('./convert')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\n// export codec\nmodule.exports = {\n  stringToStringTuples,\n  stringTuplesToString,\n\n  tuplesToStringTuples,\n  stringTuplesToTuples,\n\n  bytesToTuples,\n  tuplesToBytes,\n\n  bytesToString,\n  stringToBytes,\n\n  fromString,\n  fromBytes,\n  validateBytes,\n  isValidBytes,\n  cleanPath,\n\n  ParseError,\n  protoFromTuple,\n\n  sizeForAddr\n}\n\n// string -> [[str name, str addr]... ]\n/**\n * @param {string} str\n */\nfunction stringToStringTuples (str) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = protocols(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\n/**\n * @param {[number, string?][]} tuples\n */\nfunction stringTuplesToString (tuples) {\n  /** @type {Array<string | undefined>} */\n  const parts = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n// [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n/**\n * @param {Array<string[] | string >} tuples\n * @returns {[number , Uint8Array?][]}\n */\nfunction stringTuplesToTuples (tuples) {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBytes(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n *\n * @param {Array<[number, Uint8Array?]>} tuples\n * @returns {Array<[number, string?]>}\n */\n\nfunction tuplesToStringTuples (tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup[1]) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Uint8Array ]... ] -> Uint8Array\n/**\n * @param {[number, Uint8Array?][]} tuples\n */\nfunction tuplesToBytes (tuples) {\n  return fromBytes(uint8ArrayConcat(tuples.map((/** @type {any[]} */ tup) => {\n    const proto = protoFromTuple(tup)\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\n/**\n * @param {import(\"./types\").Protocol} p\n * @param {Uint8Array | number[]} addr\n */\nfunction sizeForAddr (p, addr) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n/**\n *\n * @param {Uint8Array} buf\n * @returns {Array<[number, Uint8Array?]>}\n */\nfunction bytesToTuples (buf) {\n  /** @type {Array<[number, Uint8Array?]>} */\n  const tuples = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Uint8Array -> String\n/**\n * @param {Uint8Array} buf\n */\nfunction bytesToString (buf) {\n  const a = bytesToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Uint8Array\n/**\n * @param {string} str\n */\nfunction stringToBytes (str) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBytes(b)\n}\n\n// String -> Uint8Array\n/**\n * @param {string} str\n */\nfunction fromString (str) {\n  return stringToBytes(str)\n}\n\n// Uint8Array -> Uint8Array\n/**\n * @param {Uint8Array} buf\n */\nfunction fromBytes (buf) {\n  const err = validateBytes(buf)\n  if (err) throw err\n  return Uint8Array.from(buf) // copy\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction validateBytes (buf) {\n  try {\n    bytesToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction isValidBytes (buf) {\n  return validateBytes(buf) === undefined\n}\n\n/**\n * @param {string} str\n */\nfunction cleanPath (str) {\n  return '/' + str.trim().split('/').filter((/** @type {any} */ a) => a).join('/')\n}\n\n/**\n * @param {string} str\n */\nfunction ParseError (str) {\n  return new Error('Error parsing address: ' + str)\n}\n\n/**\n * @param {any[]} tup\n */\nfunction protoFromTuple (tup) {\n  const proto = protocols(tup[0])\n  return proto\n}\n","'use strict'\n\nconst ip = require('./ip')\nconst protocols = require('./protocols-table')\nconst CID = require('cids')\nconst multibase = require('multibase')\nconst varint = require('varint')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayConcat = require('uint8arrays/concat')\n\nmodule.exports = Convert\n\n// converts (serializes) addresses\n/**\n * @param {string} proto\n * @param {string | Uint8Array} a\n */\nfunction Convert (proto, a) {\n  if (a instanceof Uint8Array) {\n    return Convert.toString(proto, a)\n  } else {\n    return Convert.toBytes(proto, a)\n  }\n}\n\n/**\n * Convert [code,Uint8Array] to string\n *\n * @param {number|string} proto\n * @param {Uint8Array} buf\n * @returns {string}\n */\nConvert.toString = function convertToString (proto, buf) {\n  const protocol = protocols(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return bytes2ip(buf)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return bytes2port(buf).toString()\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return bytes2str(buf)\n\n    case 421: // ipfs\n      return bytes2mh(buf)\n    case 444: // onion\n      return bytes2onion(buf)\n    case 445: // onion3\n      return bytes2onion(buf)\n    default:\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\n  }\n}\n\nConvert.toBytes = function convertToBytes (/** @type {string | number } */ proto, /** @type {string} */ str) {\n  const protocol = protocols(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n      return ip2bytes(str)\n    case 41: // ipv6\n      return ip2bytes(str)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2bytes(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return str2bytes(str)\n\n    case 421: // ipfs\n      return mh2bytes(str)\n    case 444: // onion\n      return onion2bytes(str)\n    case 445: // onion3\n      return onion32bytes(str)\n    default:\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\n  }\n}\n\n/**\n * @param {string} ipString\n */\nfunction ip2bytes (ipString) {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBytes(ipString)\n}\n\n/**\n * @param {Uint8Array} ipBuff\n */\nfunction bytes2ip (ipBuff) {\n  const ipString = ip.toString(ipBuff)\n  if (!ipString || !ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\n/**\n * @param {number} port\n */\nfunction port2bytes (port) {\n  const buf = new ArrayBuffer(2)\n  const view = new DataView(buf)\n  view.setUint16(0, port)\n\n  return new Uint8Array(buf)\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2port (buf) {\n  const view = new DataView(buf.buffer)\n  return view.getUint16(0)\n}\n\n/**\n * @param {string} str\n */\nfunction str2bytes (str) {\n  const buf = uint8ArrayFromString(str)\n  const size = Uint8Array.from(varint.encode(buf.length))\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2str (buf) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(buf)\n}\n\n/**\n * @param {string | Uint8Array | CID} hash\n */\nfunction mh2bytes (hash) {\n  // the address is a varint prefixed multihash string representation\n  const mh = new CID(hash).multihash\n  const size = Uint8Array.from(varint.encode(mh.length))\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\n}\n\n/**\n * Converts bytes to bas58btc string\n *\n * @param {Uint8Array} buf\n * @returns {string} bas58btc string\n */\nfunction bytes2mh (buf) {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(address, 'base58btc')\n}\n\n/**\n * @param {string} str\n */\nfunction onion2bytes (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.')\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = multibase.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\n/**\n * @param {string} str\n */\nfunction onion32bytes (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.')\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = multibase.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2onion (buf) {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = uint8ArrayToString(addrBytes, 'base32')\n  const port = bytes2port(portBytes)\n  return addr + ':' + port\n}\n","'use strict'\n\nconst codec = require('./codec')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\nconst CID = require('cids')\nconst errCode = require('err-code')\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayEquals = require('uint8arrays/equals')\n\n/**\n * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver\n * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput\n * @typedef {import('./types').MultiaddrObject} MultiaddrObject\n * @typedef {import('./types').Protocol} Protocol\n */\n\n/** @type {Map<string, Resolver>} */\nconst resolvers = new Map()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nclass Multiaddr {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor (addr) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    // Define symbol\n    Object.defineProperty(this, symbol, { value: true })\n\n    if (addr instanceof Uint8Array) {\n      /** @type {Uint8Array} - The raw bytes representing this multiaddress */\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (Multiaddr.isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString () {\n    return codec.bytesToString(this.bytes)\n  }\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions () {\n    /** @type {MultiaddrObject} */\n    const opts = {}\n    const parsed = this.toString().split('/')\n    opts.family = parsed[1] === 'ip4' ? 4 : 6\n    opts.host = parsed[2]\n    opts.transport = parsed[3]\n    opts.port = parseInt(parsed[4])\n    return opts\n  }\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   *\n   * @returns {Protocol[]} protocols - All the protocols the address is composed of\n   */\n  protos () {\n    return this.protoCodes().map(code => Object.assign({}, protocols(code)))\n  }\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   *\n   * @returns {number[]} protocol codes\n   */\n  protoCodes () {\n    const codes = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes\n\n      const p = protocols(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   *\n   * @returns {string[]} protocol names\n   */\n  protoNames () {\n    return this.protos().map(proto => proto.name)\n  }\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples () {\n    return codec.bytesToTuples(this.bytes)\n  }\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples () {\n    const t = codec.bytesToTuples(this.bytes)\n    return codec.tuplesToStringTuples(t)\n  }\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate (addr) {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   * @returns {Multiaddr}\n   */\n  decapsulate (addr) {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error('Address ' + this + ' does not contain subaddress: ' + addr)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   *\n   * @param {number} code - The code of the protocol to decapsulate from this Multiaddr\n   * @returns {Multiaddr}\n   */\n  decapsulateCode (code) {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   *\n   * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma\n   */\n  getPeerId () {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === protocols.names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple && tuple[1]) {\n        // Get multihash, unwrap from CID if needed\n        return uint8ArrayToString(new CID(tuple[1]).multihash, 'base58btc')\n      } else {\n        return null\n      }\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```js\n   *\n   * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present\n   */\n  getPath () {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = protocols(tuple[0])\n        if (proto.path) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (!path) {\n        path = null\n      }\n    } catch (e) {\n      path = null\n    }\n    return path\n  }\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   *\n   * @param {Multiaddr} addr\n   * @returns {boolean}\n   */\n  equals (addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   *\n   * @returns {Promise<Array<Multiaddr>>}\n   */\n  async resolve () {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (!resolvableProto) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (!resolver) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this)\n    return addresses.map((a) => new Multiaddr(a))\n  }\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   *\n   * @returns {{family: 4 | 6, address: string, port: number}}\n   * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\n   */\n  nodeAddress () {\n    const codes = this.protoCodes()\n    const names = this.protoNames()\n    const parts = this.toString().split('/').slice(1)\n\n    if (parts.length < 4) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".')\n    } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n      throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\".`)\n    } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n      throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`)\n    }\n\n    return {\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n      address: parts[1],\n      port: parseInt(parts[3]) // tcp or udp port\n    }\n  }\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   *\n   * @param {Multiaddr} [addr] - Defaults to using `this` instance\n   */\n  isThinWaistAddress (addr) {\n    const protos = (addr || this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Creates a Multiaddr from a node-friendly address object\n   *\n   * @example\n   * ```js\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {{family: 4 | 6, address: string, port: number}} addr\n   * @param {string} transport\n   */\n  static fromNodeAddress (addr, transport) {\n    if (!addr) { throw new Error('requires node address object') }\n    if (!transport) { throw new Error('requires transport protocol') }\n    let ip\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4'\n        break\n      case 6:\n        ip = 'ip6'\n        break\n      default:\n        throw Error(`Invalid addr family. Got '${addr.family}' instead of 4 or 6`)\n    }\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n  }\n\n  /**\n   * Returns if something is a Multiaddr that is a name\n   *\n   * @param {Multiaddr} addr\n   * @returns {boolean} isName\n   */\n  static isName (addr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false\n    }\n\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable)\n  }\n\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is Multiaddr}\n   */\n  static isMultiaddr (value) {\n    return value instanceof Multiaddr || Boolean(value && value[symbol])\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   *\n   * @returns {string}\n   */\n  [inspect] () {\n    return '<Multiaddr ' +\n    uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n    codec.bytesToString(this.bytes) + '>'\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   *\n   * @returns {string}\n   */\n  inspect () {\n    return '<Multiaddr ' +\n      uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n      codec.bytesToString(this.bytes) + '>'\n  }\n}\n\n/**\n * Object containing table, names and codes of all supported protocols.\n * To get the protocol values from a Multiaddr, you can use\n * [`.protos()`](#multiaddrprotos),\n * [`.protoCodes()`](#multiaddrprotocodes) or\n * [`.protoNames()`](#multiaddrprotonames)\n *\n * @returns {{table: Array, names: Object, codes: Object}}\n */\nMultiaddr.protocols = protocols\n\nMultiaddr.resolvers = resolvers\n\n/**\n * Static factory\n *\n * @param {MultiaddrInput} addr\n */\nfunction multiaddr (addr) {\n  return new Multiaddr(addr)\n}\n\nmodule.exports = { Multiaddr, multiaddr, protocols, resolvers }\n","'use strict'\n\nconst isIp = require('is-ip')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\nconst isIP = isIp\nconst isV4 = isIp.v4\nconst isV6 = isIp.v6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// @ts-ignore - this is copied from the link above better to keep it the same\nconst toBytes = function (ip, buff, offset) {\n  offset = ~~offset\n\n  let result\n\n  if (isV4(ip)) {\n    result = buff || new Uint8Array(offset + 4)\n    // @ts-ignore\n    // eslint-disable-next-line array-callback-return\n    ip.split(/\\./g).map(function (byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff\n    })\n  } else if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      var v4Buffer\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv = [i, '1']\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    result = buff || new Uint8Array(offset + 16)\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      result[offset++] = (word >> 8) & 0xff\n      result[offset++] = word & 0xff\n    }\n  }\n\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip)\n  }\n\n  return result\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\n// @ts-ignore - this is copied from the link above better to keep it the same\nconst toString = function (buff, offset, length) {\n  offset = ~~offset\n  length = length || (buff.length - offset)\n\n  const result = []\n  let string\n  const view = new DataView(buff.buffer)\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buff[offset + i])\n    }\n    string = result.join('.')\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n    string = result.join(':')\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n    string = string.replace(/:{3,4}/, '::')\n  }\n\n  return string\n}\n\nmodule.exports = {\n  isIP,\n  isV4,\n  isV6,\n  toBytes,\n  toString\n}\n","'use strict'\n/** @typedef {import(\"./types\").Protocol} Protocol */\n\n/**\n * Protocols\n *\n * @param {number | string} proto\n * @returns {Protocol}\n */\nfunction Protocols (proto) {\n  if (typeof (proto) === 'number') {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto]\n    }\n\n    throw new Error('no protocol with code: ' + proto)\n  } else if (typeof (proto) === 'string') {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto]\n    }\n\n    throw new Error('no protocol with name: ' + proto)\n  }\n\n  throw new Error('invalid protocol id type: ' + proto)\n}\n\nconst V = -1\nProtocols.lengthPrefixedVarSize = V\nProtocols.V = V\n\n/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */\nProtocols.table = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [53, V, 'dns', 'resolvable'],\n  [54, V, 'dns4', 'resolvable'],\n  [55, V, 'dns6', 'resolvable'],\n  [56, V, 'dnsaddr', 'resolvable'],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, 'path'],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [460, 0, 'quic'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [777, V, 'memory']\n]\n/** @type {Record<string,Protocol>} */\nProtocols.names = {}\n/** @type {Record<number,Protocol>} */\nProtocols.codes = {}\n\n// populate tables\nProtocols.table.map(row => {\n  const proto = p.apply(null, row)\n  Protocols.codes[proto.code] = proto\n  Protocols.names[proto.name] = proto\n  return null\n})\n\nProtocols.object = p\n\n/**\n *\n * Create a protocol\n *\n * @param {number} code\n * @param {number} size\n * @param {string} name\n * @param {any} [resolvable]\n * @param {any} [path]\n * @returns {Protocol}\n */\nfunction p (code, size, name, resolvable, path) {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\nmodule.exports = Protocols\n","'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n","'use strict'\n\nconst baseX = require('@multiformats/base-x')\nconst Base = require('./base.js')\nconst { rfc4648 } = require('./rfc4648')\nconst { decodeText, encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import('./types').Codec} Codec */\n/** @typedef {import('./types').BaseName} BaseName */\n/** @typedef {import('./types').BaseCode} BaseCode */\n\n/** @type {CodecFactory} */\nconst identity = () => {\n  return {\n    encode: decodeText,\n    decode: encodeText\n  }\n}\n\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */\nconst constants = [\n  ['identity', '\\x00', identity, ''],\n  ['base2', '0', rfc4648(1), '01'],\n  ['base8', '7', rfc4648(3), '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', rfc4648(4), '0123456789abcdef'],\n  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],\n  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],\n  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],\n  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],\n  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],\n  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],\n  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],\n  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\n/** @type {Record<BaseName,Base>} */\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, /** @type {Record<BaseName,Base>} */({}))\n\n/** @type {Record<BaseCode,Base>} */\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, /** @type {Record<BaseCode,Base>} */({}))\n\nmodule.exports = {\n  names,\n  codes\n}\n","/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */\n'use strict'\n\nconst constants = require('./constants')\nconst { encodeText, decodeText, concat } = require('./util')\n\n/** @typedef {import('./base')} Base */\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array')\n  }\n  const { name, codeBuf } = encoding(nameOrCode)\n  validEncode(name, buf)\n\n  return concat([codeBuf, buf], codeBuf.length + buf.length)\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n  const data = encodeText(enc.encode(buf))\n\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(/** @type {BaseCode} */(data[0]))\n  return enc.decode(data.substring(1))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */\nfunction isEncoded (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(/** @type {BaseCode} */(data[0]))\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(decodeText(buf))\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {\n    return constants.names[/** @type {BaseName} */(nameOrCode)]\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {\n    return constants.codes[/** @type {BaseCode} */(nameOrCode)]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  return encoding(/** @type {BaseCode} */(data[0]))\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nconst names = Object.freeze(constants.names)\nconst codes = Object.freeze(constants.codes)\nexports.names = names\nexports.codes = codes\n","'use strict'\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */\nconst rfc4648 = (bitsPerChar) => (alphabet) => {\n  return {\n    /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar)\n    }\n  }\n}\n\nmodule.exports = { rfc4648 }\n","'use strict'\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n","// DO NOT CHANGE THIS FILE. IT IS GENERATED BY tools/update-table.js\n/* eslint quote-props: off */\n'use strict'\n\n/**\n * @type {import('./generated-types').NameCodeMap}\n */\nconst baseTable = Object.freeze({\n  'identity': 0x00,\n  'cidv1': 0x01,\n  'cidv2': 0x02,\n  'cidv3': 0x03,\n  'ip4': 0x04,\n  'tcp': 0x06,\n  'sha1': 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  'sha3-512': 0x14,\n  'sha3-384': 0x15,\n  'sha3-256': 0x16,\n  'sha3-224': 0x17,\n  'shake-128': 0x18,\n  'shake-256': 0x19,\n  'keccak-224': 0x1a,\n  'keccak-256': 0x1b,\n  'keccak-384': 0x1c,\n  'keccak-512': 0x1d,\n  'blake3': 0x1e,\n  'dccp': 0x21,\n  'murmur3-128': 0x22,\n  'murmur3-32': 0x23,\n  'ip6': 0x29,\n  'ip6zone': 0x2a,\n  'path': 0x2f,\n  'multicodec': 0x30,\n  'multihash': 0x31,\n  'multiaddr': 0x32,\n  'multibase': 0x33,\n  'dns': 0x35,\n  'dns4': 0x36,\n  'dns6': 0x37,\n  'dnsaddr': 0x38,\n  'protobuf': 0x50,\n  'cbor': 0x51,\n  'raw': 0x55,\n  'dbl-sha2-256': 0x56,\n  'rlp': 0x60,\n  'bencode': 0x63,\n  'dag-pb': 0x70,\n  'dag-cbor': 0x71,\n  'libp2p-key': 0x72,\n  'git-raw': 0x78,\n  'torrent-info': 0x7b,\n  'torrent-file': 0x7c,\n  'leofcoin-block': 0x81,\n  'leofcoin-tx': 0x82,\n  'leofcoin-pr': 0x83,\n  'sctp': 0x84,\n  'dag-jose': 0x85,\n  'dag-cose': 0x86,\n  'eth-block': 0x90,\n  'eth-block-list': 0x91,\n  'eth-tx-trie': 0x92,\n  'eth-tx': 0x93,\n  'eth-tx-receipt-trie': 0x94,\n  'eth-tx-receipt': 0x95,\n  'eth-state-trie': 0x96,\n  'eth-account-snapshot': 0x97,\n  'eth-storage-trie': 0x98,\n  'bitcoin-block': 0xb0,\n  'bitcoin-tx': 0xb1,\n  'bitcoin-witness-commitment': 0xb2,\n  'zcash-block': 0xc0,\n  'zcash-tx': 0xc1,\n  'docid': 0xce,\n  'stellar-block': 0xd0,\n  'stellar-tx': 0xd1,\n  'md4': 0xd4,\n  'md5': 0xd5,\n  'bmt': 0xd6,\n  'decred-block': 0xe0,\n  'decred-tx': 0xe1,\n  'ipld-ns': 0xe2,\n  'ipfs-ns': 0xe3,\n  'swarm-ns': 0xe4,\n  'ipns-ns': 0xe5,\n  'zeronet': 0xe6,\n  'secp256k1-pub': 0xe7,\n  'bls12_381-g1-pub': 0xea,\n  'bls12_381-g2-pub': 0xeb,\n  'x25519-pub': 0xec,\n  'ed25519-pub': 0xed,\n  'bls12_381-g1g2-pub': 0xee,\n  'dash-block': 0xf0,\n  'dash-tx': 0xf1,\n  'swarm-manifest': 0xfa,\n  'swarm-feed': 0xfb,\n  'udp': 0x0111,\n  'p2p-webrtc-star': 0x0113,\n  'p2p-webrtc-direct': 0x0114,\n  'p2p-stardust': 0x0115,\n  'p2p-circuit': 0x0122,\n  'dag-json': 0x0129,\n  'udt': 0x012d,\n  'utp': 0x012e,\n  'unix': 0x0190,\n  'thread': 0x0196,\n  'p2p': 0x01a5,\n  'ipfs': 0x01a5,\n  'https': 0x01bb,\n  'onion': 0x01bc,\n  'onion3': 0x01bd,\n  'garlic64': 0x01be,\n  'garlic32': 0x01bf,\n  'tls': 0x01c0,\n  'quic': 0x01cc,\n  'ws': 0x01dd,\n  'wss': 0x01de,\n  'p2p-websocket-star': 0x01df,\n  'http': 0x01e0,\n  'json': 0x0200,\n  'messagepack': 0x0201,\n  'libp2p-peer-record': 0x0301,\n  'sha2-256-trunc254-padded': 0x1012,\n  'ripemd-128': 0x1052,\n  'ripemd-160': 0x1053,\n  'ripemd-256': 0x1054,\n  'ripemd-320': 0x1055,\n  'x11': 0x1100,\n  'p256-pub': 0x1200,\n  'p384-pub': 0x1201,\n  'p521-pub': 0x1202,\n  'ed448-pub': 0x1203,\n  'x448-pub': 0x1204,\n  'ed25519-priv': 0x1300,\n  'kangarootwelve': 0x1d01,\n  'sm3-256': 0x534d,\n  'blake2b-8': 0xb201,\n  'blake2b-16': 0xb202,\n  'blake2b-24': 0xb203,\n  'blake2b-32': 0xb204,\n  'blake2b-40': 0xb205,\n  'blake2b-48': 0xb206,\n  'blake2b-56': 0xb207,\n  'blake2b-64': 0xb208,\n  'blake2b-72': 0xb209,\n  'blake2b-80': 0xb20a,\n  'blake2b-88': 0xb20b,\n  'blake2b-96': 0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8': 0xb241,\n  'blake2s-16': 0xb242,\n  'blake2s-24': 0xb243,\n  'blake2s-32': 0xb244,\n  'blake2s-40': 0xb245,\n  'blake2s-48': 0xb246,\n  'blake2s-56': 0xb247,\n  'blake2s-64': 0xb248,\n  'blake2s-72': 0xb249,\n  'blake2s-80': 0xb24a,\n  'blake2s-88': 0xb24b,\n  'blake2s-96': 0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'skein256-8': 0xb301,\n  'skein256-16': 0xb302,\n  'skein256-24': 0xb303,\n  'skein256-32': 0xb304,\n  'skein256-40': 0xb305,\n  'skein256-48': 0xb306,\n  'skein256-56': 0xb307,\n  'skein256-64': 0xb308,\n  'skein256-72': 0xb309,\n  'skein256-80': 0xb30a,\n  'skein256-88': 0xb30b,\n  'skein256-96': 0xb30c,\n  'skein256-104': 0xb30d,\n  'skein256-112': 0xb30e,\n  'skein256-120': 0xb30f,\n  'skein256-128': 0xb310,\n  'skein256-136': 0xb311,\n  'skein256-144': 0xb312,\n  'skein256-152': 0xb313,\n  'skein256-160': 0xb314,\n  'skein256-168': 0xb315,\n  'skein256-176': 0xb316,\n  'skein256-184': 0xb317,\n  'skein256-192': 0xb318,\n  'skein256-200': 0xb319,\n  'skein256-208': 0xb31a,\n  'skein256-216': 0xb31b,\n  'skein256-224': 0xb31c,\n  'skein256-232': 0xb31d,\n  'skein256-240': 0xb31e,\n  'skein256-248': 0xb31f,\n  'skein256-256': 0xb320,\n  'skein512-8': 0xb321,\n  'skein512-16': 0xb322,\n  'skein512-24': 0xb323,\n  'skein512-32': 0xb324,\n  'skein512-40': 0xb325,\n  'skein512-48': 0xb326,\n  'skein512-56': 0xb327,\n  'skein512-64': 0xb328,\n  'skein512-72': 0xb329,\n  'skein512-80': 0xb32a,\n  'skein512-88': 0xb32b,\n  'skein512-96': 0xb32c,\n  'skein512-104': 0xb32d,\n  'skein512-112': 0xb32e,\n  'skein512-120': 0xb32f,\n  'skein512-128': 0xb330,\n  'skein512-136': 0xb331,\n  'skein512-144': 0xb332,\n  'skein512-152': 0xb333,\n  'skein512-160': 0xb334,\n  'skein512-168': 0xb335,\n  'skein512-176': 0xb336,\n  'skein512-184': 0xb337,\n  'skein512-192': 0xb338,\n  'skein512-200': 0xb339,\n  'skein512-208': 0xb33a,\n  'skein512-216': 0xb33b,\n  'skein512-224': 0xb33c,\n  'skein512-232': 0xb33d,\n  'skein512-240': 0xb33e,\n  'skein512-248': 0xb33f,\n  'skein512-256': 0xb340,\n  'skein512-264': 0xb341,\n  'skein512-272': 0xb342,\n  'skein512-280': 0xb343,\n  'skein512-288': 0xb344,\n  'skein512-296': 0xb345,\n  'skein512-304': 0xb346,\n  'skein512-312': 0xb347,\n  'skein512-320': 0xb348,\n  'skein512-328': 0xb349,\n  'skein512-336': 0xb34a,\n  'skein512-344': 0xb34b,\n  'skein512-352': 0xb34c,\n  'skein512-360': 0xb34d,\n  'skein512-368': 0xb34e,\n  'skein512-376': 0xb34f,\n  'skein512-384': 0xb350,\n  'skein512-392': 0xb351,\n  'skein512-400': 0xb352,\n  'skein512-408': 0xb353,\n  'skein512-416': 0xb354,\n  'skein512-424': 0xb355,\n  'skein512-432': 0xb356,\n  'skein512-440': 0xb357,\n  'skein512-448': 0xb358,\n  'skein512-456': 0xb359,\n  'skein512-464': 0xb35a,\n  'skein512-472': 0xb35b,\n  'skein512-480': 0xb35c,\n  'skein512-488': 0xb35d,\n  'skein512-496': 0xb35e,\n  'skein512-504': 0xb35f,\n  'skein512-512': 0xb360,\n  'skein1024-8': 0xb361,\n  'skein1024-16': 0xb362,\n  'skein1024-24': 0xb363,\n  'skein1024-32': 0xb364,\n  'skein1024-40': 0xb365,\n  'skein1024-48': 0xb366,\n  'skein1024-56': 0xb367,\n  'skein1024-64': 0xb368,\n  'skein1024-72': 0xb369,\n  'skein1024-80': 0xb36a,\n  'skein1024-88': 0xb36b,\n  'skein1024-96': 0xb36c,\n  'skein1024-104': 0xb36d,\n  'skein1024-112': 0xb36e,\n  'skein1024-120': 0xb36f,\n  'skein1024-128': 0xb370,\n  'skein1024-136': 0xb371,\n  'skein1024-144': 0xb372,\n  'skein1024-152': 0xb373,\n  'skein1024-160': 0xb374,\n  'skein1024-168': 0xb375,\n  'skein1024-176': 0xb376,\n  'skein1024-184': 0xb377,\n  'skein1024-192': 0xb378,\n  'skein1024-200': 0xb379,\n  'skein1024-208': 0xb37a,\n  'skein1024-216': 0xb37b,\n  'skein1024-224': 0xb37c,\n  'skein1024-232': 0xb37d,\n  'skein1024-240': 0xb37e,\n  'skein1024-248': 0xb37f,\n  'skein1024-256': 0xb380,\n  'skein1024-264': 0xb381,\n  'skein1024-272': 0xb382,\n  'skein1024-280': 0xb383,\n  'skein1024-288': 0xb384,\n  'skein1024-296': 0xb385,\n  'skein1024-304': 0xb386,\n  'skein1024-312': 0xb387,\n  'skein1024-320': 0xb388,\n  'skein1024-328': 0xb389,\n  'skein1024-336': 0xb38a,\n  'skein1024-344': 0xb38b,\n  'skein1024-352': 0xb38c,\n  'skein1024-360': 0xb38d,\n  'skein1024-368': 0xb38e,\n  'skein1024-376': 0xb38f,\n  'skein1024-384': 0xb390,\n  'skein1024-392': 0xb391,\n  'skein1024-400': 0xb392,\n  'skein1024-408': 0xb393,\n  'skein1024-416': 0xb394,\n  'skein1024-424': 0xb395,\n  'skein1024-432': 0xb396,\n  'skein1024-440': 0xb397,\n  'skein1024-448': 0xb398,\n  'skein1024-456': 0xb399,\n  'skein1024-464': 0xb39a,\n  'skein1024-472': 0xb39b,\n  'skein1024-480': 0xb39c,\n  'skein1024-488': 0xb39d,\n  'skein1024-496': 0xb39e,\n  'skein1024-504': 0xb39f,\n  'skein1024-512': 0xb3a0,\n  'skein1024-520': 0xb3a1,\n  'skein1024-528': 0xb3a2,\n  'skein1024-536': 0xb3a3,\n  'skein1024-544': 0xb3a4,\n  'skein1024-552': 0xb3a5,\n  'skein1024-560': 0xb3a6,\n  'skein1024-568': 0xb3a7,\n  'skein1024-576': 0xb3a8,\n  'skein1024-584': 0xb3a9,\n  'skein1024-592': 0xb3aa,\n  'skein1024-600': 0xb3ab,\n  'skein1024-608': 0xb3ac,\n  'skein1024-616': 0xb3ad,\n  'skein1024-624': 0xb3ae,\n  'skein1024-632': 0xb3af,\n  'skein1024-640': 0xb3b0,\n  'skein1024-648': 0xb3b1,\n  'skein1024-656': 0xb3b2,\n  'skein1024-664': 0xb3b3,\n  'skein1024-672': 0xb3b4,\n  'skein1024-680': 0xb3b5,\n  'skein1024-688': 0xb3b6,\n  'skein1024-696': 0xb3b7,\n  'skein1024-704': 0xb3b8,\n  'skein1024-712': 0xb3b9,\n  'skein1024-720': 0xb3ba,\n  'skein1024-728': 0xb3bb,\n  'skein1024-736': 0xb3bc,\n  'skein1024-744': 0xb3bd,\n  'skein1024-752': 0xb3be,\n  'skein1024-760': 0xb3bf,\n  'skein1024-768': 0xb3c0,\n  'skein1024-776': 0xb3c1,\n  'skein1024-784': 0xb3c2,\n  'skein1024-792': 0xb3c3,\n  'skein1024-800': 0xb3c4,\n  'skein1024-808': 0xb3c5,\n  'skein1024-816': 0xb3c6,\n  'skein1024-824': 0xb3c7,\n  'skein1024-832': 0xb3c8,\n  'skein1024-840': 0xb3c9,\n  'skein1024-848': 0xb3ca,\n  'skein1024-856': 0xb3cb,\n  'skein1024-864': 0xb3cc,\n  'skein1024-872': 0xb3cd,\n  'skein1024-880': 0xb3ce,\n  'skein1024-888': 0xb3cf,\n  'skein1024-896': 0xb3d0,\n  'skein1024-904': 0xb3d1,\n  'skein1024-912': 0xb3d2,\n  'skein1024-920': 0xb3d3,\n  'skein1024-928': 0xb3d4,\n  'skein1024-936': 0xb3d5,\n  'skein1024-944': 0xb3d6,\n  'skein1024-952': 0xb3d7,\n  'skein1024-960': 0xb3d8,\n  'skein1024-968': 0xb3d9,\n  'skein1024-976': 0xb3da,\n  'skein1024-984': 0xb3db,\n  'skein1024-992': 0xb3dc,\n  'skein1024-1000': 0xb3dd,\n  'skein1024-1008': 0xb3de,\n  'skein1024-1016': 0xb3df,\n  'skein1024-1024': 0xb3e0,\n  'poseidon-bls12_381-a2-fc1': 0xb401,\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402,\n  'zeroxcert-imprint-256': 0xce11,\n  'fil-commitment-unsealed': 0xf101,\n  'fil-commitment-sealed': 0xf102,\n  'holochain-adr-v0': 0x807124,\n  'holochain-adr-v1': 0x817124,\n  'holochain-key-v0': 0x947124,\n  'holochain-key-v1': 0x957124,\n  'holochain-sig-v0': 0xa27124,\n  'holochain-sig-v1': 0xa37124,\n  'skynet-ns': 0xb19910\n})\n\nmodule.exports = { baseTable }\n","/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\n\nconst varint = require('varint')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst util = require('./util')\nconst { nameToVarint, constantToCode, nameToCode, codeToName } = require('./maps')\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix (multicodecStrOrCode, data) {\n  let prefix\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\n  } else {\n    if (nameToVarint[multicodecStrOrCode]) {\n      prefix = nameToVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix (data) {\n  varint.decode(/** @type {Buffer} */(data))\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getNameFromData (prefixedData) {\n  const code = /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\n  const name = codeToName[code]\n  if (name === undefined) {\n    throw new Error(`Code \"${code}\" not found`)\n  }\n  return name\n}\n\n/**\n * Get the codec name from a code.\n *\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getNameFromCode (codec) {\n  return codeToName[codec]\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getCodeFromName (name) {\n  const code = nameToCode[name]\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`)\n  }\n  return code\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCodeFromData (prefixedData) {\n  return /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getVarintFromName (name) {\n  const code = nameToVarint[name]\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`)\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecCode} code\n * @returns {Uint8Array}\n */\nfunction getVarintFromCode (code) {\n  return util.varintEncode(code)\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @deprecated use getNameFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec (prefixedData) {\n  return getNameFromData(prefixedData)\n}\n\n/**\n * Get the codec name from a code.\n *\n * @deprecated use getNameFromCode instead.\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getName (codec) {\n  return getNameFromCode(codec)\n}\n\n/**\n * Get the code of the codec\n *\n * @deprecated use getCodeFromName instead.\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getNumber (name) {\n  return getCodeFromName(name)\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @deprecated use getCodeFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCode (prefixedData) {\n  return getCodeFromData(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @deprecated use getVarintFromName instead.\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getCodeVarint (name) {\n  return getVarintFromName(name)\n}\n\n/**\n * Get the varint of a code.\n *\n * @deprecated use getVarintFromCode instead.\n * @param {CodecCode} code\n * @returns {Array.<number>}\n */\nfunction getVarint (code) {\n  return Array.from(getVarintFromCode(code))\n}\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getNameFromData,\n  getNameFromCode,\n  getCodeFromName,\n  getCodeFromData,\n  getVarintFromName,\n  getVarintFromCode,\n  // Deprecated\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  // Make the constants top-level constants\n  ...constantToCode,\n  // Export the maps\n  nameToVarint,\n  nameToCode,\n  codeToName\n}\n","'use strict'\n\n/** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */\n/** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\n/** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecConstant} CodecConstant */\n\nconst { baseTable } = require('./generated-table')\nconst varintEncode = require('./util').varintEncode\n\nconst nameToVarint = /** @type {NameUint8ArrayMap} */ ({})\nconst constantToCode = /** @type {ConstantCodeMap} */({})\nconst codeToName = /** @type {CodeNameMap} */({})\n\n// eslint-disable-next-line guard-for-in\nfor (const name in baseTable) {\n  const codecName = /** @type {CodecName} */(name)\n  const code = baseTable[codecName]\n  nameToVarint[codecName] = varintEncode(code)\n\n  const constant = /** @type {CodecConstant} */(codecName.toUpperCase().replace(/-/g, '_'))\n  constantToCode[constant] = code\n\n  if (!codeToName[code]) {\n    codeToName[code] = codecName\n  }\n}\n\nObject.freeze(nameToVarint)\nObject.freeze(constantToCode)\nObject.freeze(codeToName)\nconst nameToCode = Object.freeze(baseTable)\nmodule.exports = {\n  nameToVarint,\n  constantToCode,\n  nameToCode,\n  codeToName\n}\n","'use strict'\n\nconst varint = require('varint')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = {\n  numberToUint8Array,\n  uint8ArrayToNumber,\n  varintUint8ArrayEncode,\n  varintEncode\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction uint8ArrayToNumber (buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16)\n}\n\n/**\n * @param {number} num\n */\nfunction numberToUint8Array (num) {\n  let hexString = num.toString(16)\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString\n  }\n  return uint8ArrayFromString(hexString, 'base16')\n}\n\n/**\n * @param {Uint8Array} input\n */\nfunction varintUint8ArrayEncode (input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))\n}\n\n/**\n * @param {number} num\n */\nfunction varintEncode (num) {\n  return Uint8Array.from(varint.encode(num))\n}\n","/* eslint quote-props: off */\n'use strict'\n\n/**\n * Names for all available hashes\n *\n * @typedef { \"identity\" | \"sha1\" | \"sha2-256\" | \"sha2-512\" | \"sha3-512\" | \"sha3-384\" | \"sha3-256\" | \"sha3-224\" | \"shake-128\" | \"shake-256\" | \"keccak-224\" | \"keccak-256\" | \"keccak-384\" | \"keccak-512\" | \"blake3\" | \"murmur3-128\" | \"murmur3-32\" | \"dbl-sha2-256\" | \"md4\" | \"md5\" | \"bmt\" | \"sha2-256-trunc254-padded\" | \"ripemd-128\" | \"ripemd-160\" | \"ripemd-256\" | \"ripemd-320\" | \"x11\" | \"kangarootwelve\" | \"sm3-256\" | \"blake2b-8\" | \"blake2b-16\" | \"blake2b-24\" | \"blake2b-32\" | \"blake2b-40\" | \"blake2b-48\" | \"blake2b-56\" | \"blake2b-64\" | \"blake2b-72\" | \"blake2b-80\" | \"blake2b-88\" | \"blake2b-96\" | \"blake2b-104\" | \"blake2b-112\" | \"blake2b-120\" | \"blake2b-128\" | \"blake2b-136\" | \"blake2b-144\" | \"blake2b-152\" | \"blake2b-160\" | \"blake2b-168\" | \"blake2b-176\" | \"blake2b-184\" | \"blake2b-192\" | \"blake2b-200\" | \"blake2b-208\" | \"blake2b-216\" | \"blake2b-224\" | \"blake2b-232\" | \"blake2b-240\" | \"blake2b-248\" | \"blake2b-256\" | \"blake2b-264\" | \"blake2b-272\" | \"blake2b-280\" | \"blake2b-288\" | \"blake2b-296\" | \"blake2b-304\" | \"blake2b-312\" | \"blake2b-320\" | \"blake2b-328\" | \"blake2b-336\" | \"blake2b-344\" | \"blake2b-352\" | \"blake2b-360\" | \"blake2b-368\" | \"blake2b-376\" | \"blake2b-384\" | \"blake2b-392\" | \"blake2b-400\" | \"blake2b-408\" | \"blake2b-416\" | \"blake2b-424\" | \"blake2b-432\" | \"blake2b-440\" | \"blake2b-448\" | \"blake2b-456\" | \"blake2b-464\" | \"blake2b-472\" | \"blake2b-480\" | \"blake2b-488\" | \"blake2b-496\" | \"blake2b-504\" | \"blake2b-512\" | \"blake2s-8\" | \"blake2s-16\" | \"blake2s-24\" | \"blake2s-32\" | \"blake2s-40\" | \"blake2s-48\" | \"blake2s-56\" | \"blake2s-64\" | \"blake2s-72\" | \"blake2s-80\" | \"blake2s-88\" | \"blake2s-96\" | \"blake2s-104\" | \"blake2s-112\" | \"blake2s-120\" | \"blake2s-128\" | \"blake2s-136\" | \"blake2s-144\" | \"blake2s-152\" | \"blake2s-160\" | \"blake2s-168\" | \"blake2s-176\" | \"blake2s-184\" | \"blake2s-192\" | \"blake2s-200\" | \"blake2s-208\" | \"blake2s-216\" | \"blake2s-224\" | \"blake2s-232\" | \"blake2s-240\" | \"blake2s-248\" | \"blake2s-256\" | \"skein256-8\" | \"skein256-16\" | \"skein256-24\" | \"skein256-32\" | \"skein256-40\" | \"skein256-48\" | \"skein256-56\" | \"skein256-64\" | \"skein256-72\" | \"skein256-80\" | \"skein256-88\" | \"skein256-96\" | \"skein256-104\" | \"skein256-112\" | \"skein256-120\" | \"skein256-128\" | \"skein256-136\" | \"skein256-144\" | \"skein256-152\" | \"skein256-160\" | \"skein256-168\" | \"skein256-176\" | \"skein256-184\" | \"skein256-192\" | \"skein256-200\" | \"skein256-208\" | \"skein256-216\" | \"skein256-224\" | \"skein256-232\" | \"skein256-240\" | \"skein256-248\" | \"skein256-256\" | \"skein512-8\" | \"skein512-16\" | \"skein512-24\" | \"skein512-32\" | \"skein512-40\" | \"skein512-48\" | \"skein512-56\" | \"skein512-64\" | \"skein512-72\" | \"skein512-80\" | \"skein512-88\" | \"skein512-96\" | \"skein512-104\" | \"skein512-112\" | \"skein512-120\" | \"skein512-128\" | \"skein512-136\" | \"skein512-144\" | \"skein512-152\" | \"skein512-160\" | \"skein512-168\" | \"skein512-176\" | \"skein512-184\" | \"skein512-192\" | \"skein512-200\" | \"skein512-208\" | \"skein512-216\" | \"skein512-224\" | \"skein512-232\" | \"skein512-240\" | \"skein512-248\" | \"skein512-256\" | \"skein512-264\" | \"skein512-272\" | \"skein512-280\" | \"skein512-288\" | \"skein512-296\" | \"skein512-304\" | \"skein512-312\" | \"skein512-320\" | \"skein512-328\" | \"skein512-336\" | \"skein512-344\" | \"skein512-352\" | \"skein512-360\" | \"skein512-368\" | \"skein512-376\" | \"skein512-384\" | \"skein512-392\" | \"skein512-400\" | \"skein512-408\" | \"skein512-416\" | \"skein512-424\" | \"skein512-432\" | \"skein512-440\" | \"skein512-448\" | \"skein512-456\" | \"skein512-464\" | \"skein512-472\" | \"skein512-480\" | \"skein512-488\" | \"skein512-496\" | \"skein512-504\" | \"skein512-512\" | \"skein1024-8\" | \"skein1024-16\" | \"skein1024-24\" | \"skein1024-32\" | \"skein1024-40\" | \"skein1024-48\" | \"skein1024-56\" | \"skein1024-64\" | \"skein1024-72\" | \"skein1024-80\" | \"skein1024-88\" | \"skein1024-96\" | \"skein1024-104\" | \"skein1024-112\" | \"skein1024-120\" | \"skein1024-128\" | \"skein1024-136\" | \"skein1024-144\" | \"skein1024-152\" | \"skein1024-160\" | \"skein1024-168\" | \"skein1024-176\" | \"skein1024-184\" | \"skein1024-192\" | \"skein1024-200\" | \"skein1024-208\" | \"skein1024-216\" | \"skein1024-224\" | \"skein1024-232\" | \"skein1024-240\" | \"skein1024-248\" | \"skein1024-256\" | \"skein1024-264\" | \"skein1024-272\" | \"skein1024-280\" | \"skein1024-288\" | \"skein1024-296\" | \"skein1024-304\" | \"skein1024-312\" | \"skein1024-320\" | \"skein1024-328\" | \"skein1024-336\" | \"skein1024-344\" | \"skein1024-352\" | \"skein1024-360\" | \"skein1024-368\" | \"skein1024-376\" | \"skein1024-384\" | \"skein1024-392\" | \"skein1024-400\" | \"skein1024-408\" | \"skein1024-416\" | \"skein1024-424\" | \"skein1024-432\" | \"skein1024-440\" | \"skein1024-448\" | \"skein1024-456\" | \"skein1024-464\" | \"skein1024-472\" | \"skein1024-480\" | \"skein1024-488\" | \"skein1024-496\" | \"skein1024-504\" | \"skein1024-512\" | \"skein1024-520\" | \"skein1024-528\" | \"skein1024-536\" | \"skein1024-544\" | \"skein1024-552\" | \"skein1024-560\" | \"skein1024-568\" | \"skein1024-576\" | \"skein1024-584\" | \"skein1024-592\" | \"skein1024-600\" | \"skein1024-608\" | \"skein1024-616\" | \"skein1024-624\" | \"skein1024-632\" | \"skein1024-640\" | \"skein1024-648\" | \"skein1024-656\" | \"skein1024-664\" | \"skein1024-672\" | \"skein1024-680\" | \"skein1024-688\" | \"skein1024-696\" | \"skein1024-704\" | \"skein1024-712\" | \"skein1024-720\" | \"skein1024-728\" | \"skein1024-736\" | \"skein1024-744\" | \"skein1024-752\" | \"skein1024-760\" | \"skein1024-768\" | \"skein1024-776\" | \"skein1024-784\" | \"skein1024-792\" | \"skein1024-800\" | \"skein1024-808\" | \"skein1024-816\" | \"skein1024-824\" | \"skein1024-832\" | \"skein1024-840\" | \"skein1024-848\" | \"skein1024-856\" | \"skein1024-864\" | \"skein1024-872\" | \"skein1024-880\" | \"skein1024-888\" | \"skein1024-896\" | \"skein1024-904\" | \"skein1024-912\" | \"skein1024-920\" | \"skein1024-928\" | \"skein1024-936\" | \"skein1024-944\" | \"skein1024-952\" | \"skein1024-960\" | \"skein1024-968\" | \"skein1024-976\" | \"skein1024-984\" | \"skein1024-992\" | \"skein1024-1000\" | \"skein1024-1008\" | \"skein1024-1016\" | \"skein1024-1024\" | \"poseidon-bls12_381-a2-fc1\" | \"poseidon-bls12_381-a2-fc1-sc\" } HashName\n */\n/**\n * Codes for all available hashes\n *\n * @typedef { 0x00 | 0x11 | 0x12 | 0x13 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1a | 0x1b | 0x1c | 0x1d | 0x1e | 0x22 | 0x23 | 0x56 | 0xd4 | 0xd5 | 0xd6 | 0x1012 | 0x1052 | 0x1053 | 0x1054 | 0x1055 | 0x1100 | 0x1d01 | 0x534d | 0xb201 | 0xb202 | 0xb203 | 0xb204 | 0xb205 | 0xb206 | 0xb207 | 0xb208 | 0xb209 | 0xb20a | 0xb20b | 0xb20c | 0xb20d | 0xb20e | 0xb20f | 0xb210 | 0xb211 | 0xb212 | 0xb213 | 0xb214 | 0xb215 | 0xb216 | 0xb217 | 0xb218 | 0xb219 | 0xb21a | 0xb21b | 0xb21c | 0xb21d | 0xb21e | 0xb21f | 0xb220 | 0xb221 | 0xb222 | 0xb223 | 0xb224 | 0xb225 | 0xb226 | 0xb227 | 0xb228 | 0xb229 | 0xb22a | 0xb22b | 0xb22c | 0xb22d | 0xb22e | 0xb22f | 0xb230 | 0xb231 | 0xb232 | 0xb233 | 0xb234 | 0xb235 | 0xb236 | 0xb237 | 0xb238 | 0xb239 | 0xb23a | 0xb23b | 0xb23c | 0xb23d | 0xb23e | 0xb23f | 0xb240 | 0xb241 | 0xb242 | 0xb243 | 0xb244 | 0xb245 | 0xb246 | 0xb247 | 0xb248 | 0xb249 | 0xb24a | 0xb24b | 0xb24c | 0xb24d | 0xb24e | 0xb24f | 0xb250 | 0xb251 | 0xb252 | 0xb253 | 0xb254 | 0xb255 | 0xb256 | 0xb257 | 0xb258 | 0xb259 | 0xb25a | 0xb25b | 0xb25c | 0xb25d | 0xb25e | 0xb25f | 0xb260 | 0xb301 | 0xb302 | 0xb303 | 0xb304 | 0xb305 | 0xb306 | 0xb307 | 0xb308 | 0xb309 | 0xb30a | 0xb30b | 0xb30c | 0xb30d | 0xb30e | 0xb30f | 0xb310 | 0xb311 | 0xb312 | 0xb313 | 0xb314 | 0xb315 | 0xb316 | 0xb317 | 0xb318 | 0xb319 | 0xb31a | 0xb31b | 0xb31c | 0xb31d | 0xb31e | 0xb31f | 0xb320 | 0xb321 | 0xb322 | 0xb323 | 0xb324 | 0xb325 | 0xb326 | 0xb327 | 0xb328 | 0xb329 | 0xb32a | 0xb32b | 0xb32c | 0xb32d | 0xb32e | 0xb32f | 0xb330 | 0xb331 | 0xb332 | 0xb333 | 0xb334 | 0xb335 | 0xb336 | 0xb337 | 0xb338 | 0xb339 | 0xb33a | 0xb33b | 0xb33c | 0xb33d | 0xb33e | 0xb33f | 0xb340 | 0xb341 | 0xb342 | 0xb343 | 0xb344 | 0xb345 | 0xb346 | 0xb347 | 0xb348 | 0xb349 | 0xb34a | 0xb34b | 0xb34c | 0xb34d | 0xb34e | 0xb34f | 0xb350 | 0xb351 | 0xb352 | 0xb353 | 0xb354 | 0xb355 | 0xb356 | 0xb357 | 0xb358 | 0xb359 | 0xb35a | 0xb35b | 0xb35c | 0xb35d | 0xb35e | 0xb35f | 0xb360 | 0xb361 | 0xb362 | 0xb363 | 0xb364 | 0xb365 | 0xb366 | 0xb367 | 0xb368 | 0xb369 | 0xb36a | 0xb36b | 0xb36c | 0xb36d | 0xb36e | 0xb36f | 0xb370 | 0xb371 | 0xb372 | 0xb373 | 0xb374 | 0xb375 | 0xb376 | 0xb377 | 0xb378 | 0xb379 | 0xb37a | 0xb37b | 0xb37c | 0xb37d | 0xb37e | 0xb37f | 0xb380 | 0xb381 | 0xb382 | 0xb383 | 0xb384 | 0xb385 | 0xb386 | 0xb387 | 0xb388 | 0xb389 | 0xb38a | 0xb38b | 0xb38c | 0xb38d | 0xb38e | 0xb38f | 0xb390 | 0xb391 | 0xb392 | 0xb393 | 0xb394 | 0xb395 | 0xb396 | 0xb397 | 0xb398 | 0xb399 | 0xb39a | 0xb39b | 0xb39c | 0xb39d | 0xb39e | 0xb39f | 0xb3a0 | 0xb3a1 | 0xb3a2 | 0xb3a3 | 0xb3a4 | 0xb3a5 | 0xb3a6 | 0xb3a7 | 0xb3a8 | 0xb3a9 | 0xb3aa | 0xb3ab | 0xb3ac | 0xb3ad | 0xb3ae | 0xb3af | 0xb3b0 | 0xb3b1 | 0xb3b2 | 0xb3b3 | 0xb3b4 | 0xb3b5 | 0xb3b6 | 0xb3b7 | 0xb3b8 | 0xb3b9 | 0xb3ba | 0xb3bb | 0xb3bc | 0xb3bd | 0xb3be | 0xb3bf | 0xb3c0 | 0xb3c1 | 0xb3c2 | 0xb3c3 | 0xb3c4 | 0xb3c5 | 0xb3c6 | 0xb3c7 | 0xb3c8 | 0xb3c9 | 0xb3ca | 0xb3cb | 0xb3cc | 0xb3cd | 0xb3ce | 0xb3cf | 0xb3d0 | 0xb3d1 | 0xb3d2 | 0xb3d3 | 0xb3d4 | 0xb3d5 | 0xb3d6 | 0xb3d7 | 0xb3d8 | 0xb3d9 | 0xb3da | 0xb3db | 0xb3dc | 0xb3dd | 0xb3de | 0xb3df | 0xb3e0 | 0xb401 | 0xb402 } HashCode\n */\n\n/**\n * @type { Record<HashName,HashCode> }\n */\nconst names = Object.freeze({\n  'identity': 0x00,\n  'sha1': 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  'sha3-512': 0x14,\n  'sha3-384': 0x15,\n  'sha3-256': 0x16,\n  'sha3-224': 0x17,\n  'shake-128': 0x18,\n  'shake-256': 0x19,\n  'keccak-224': 0x1a,\n  'keccak-256': 0x1b,\n  'keccak-384': 0x1c,\n  'keccak-512': 0x1d,\n  'blake3': 0x1e,\n  'murmur3-128': 0x22,\n  'murmur3-32': 0x23,\n  'dbl-sha2-256': 0x56,\n  'md4': 0xd4,\n  'md5': 0xd5,\n  'bmt': 0xd6,\n  'sha2-256-trunc254-padded': 0x1012,\n  'ripemd-128': 0x1052,\n  'ripemd-160': 0x1053,\n  'ripemd-256': 0x1054,\n  'ripemd-320': 0x1055,\n  'x11': 0x1100,\n  'kangarootwelve': 0x1d01,\n  'sm3-256': 0x534d,\n  'blake2b-8': 0xb201,\n  'blake2b-16': 0xb202,\n  'blake2b-24': 0xb203,\n  'blake2b-32': 0xb204,\n  'blake2b-40': 0xb205,\n  'blake2b-48': 0xb206,\n  'blake2b-56': 0xb207,\n  'blake2b-64': 0xb208,\n  'blake2b-72': 0xb209,\n  'blake2b-80': 0xb20a,\n  'blake2b-88': 0xb20b,\n  'blake2b-96': 0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8': 0xb241,\n  'blake2s-16': 0xb242,\n  'blake2s-24': 0xb243,\n  'blake2s-32': 0xb244,\n  'blake2s-40': 0xb245,\n  'blake2s-48': 0xb246,\n  'blake2s-56': 0xb247,\n  'blake2s-64': 0xb248,\n  'blake2s-72': 0xb249,\n  'blake2s-80': 0xb24a,\n  'blake2s-88': 0xb24b,\n  'blake2s-96': 0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'skein256-8': 0xb301,\n  'skein256-16': 0xb302,\n  'skein256-24': 0xb303,\n  'skein256-32': 0xb304,\n  'skein256-40': 0xb305,\n  'skein256-48': 0xb306,\n  'skein256-56': 0xb307,\n  'skein256-64': 0xb308,\n  'skein256-72': 0xb309,\n  'skein256-80': 0xb30a,\n  'skein256-88': 0xb30b,\n  'skein256-96': 0xb30c,\n  'skein256-104': 0xb30d,\n  'skein256-112': 0xb30e,\n  'skein256-120': 0xb30f,\n  'skein256-128': 0xb310,\n  'skein256-136': 0xb311,\n  'skein256-144': 0xb312,\n  'skein256-152': 0xb313,\n  'skein256-160': 0xb314,\n  'skein256-168': 0xb315,\n  'skein256-176': 0xb316,\n  'skein256-184': 0xb317,\n  'skein256-192': 0xb318,\n  'skein256-200': 0xb319,\n  'skein256-208': 0xb31a,\n  'skein256-216': 0xb31b,\n  'skein256-224': 0xb31c,\n  'skein256-232': 0xb31d,\n  'skein256-240': 0xb31e,\n  'skein256-248': 0xb31f,\n  'skein256-256': 0xb320,\n  'skein512-8': 0xb321,\n  'skein512-16': 0xb322,\n  'skein512-24': 0xb323,\n  'skein512-32': 0xb324,\n  'skein512-40': 0xb325,\n  'skein512-48': 0xb326,\n  'skein512-56': 0xb327,\n  'skein512-64': 0xb328,\n  'skein512-72': 0xb329,\n  'skein512-80': 0xb32a,\n  'skein512-88': 0xb32b,\n  'skein512-96': 0xb32c,\n  'skein512-104': 0xb32d,\n  'skein512-112': 0xb32e,\n  'skein512-120': 0xb32f,\n  'skein512-128': 0xb330,\n  'skein512-136': 0xb331,\n  'skein512-144': 0xb332,\n  'skein512-152': 0xb333,\n  'skein512-160': 0xb334,\n  'skein512-168': 0xb335,\n  'skein512-176': 0xb336,\n  'skein512-184': 0xb337,\n  'skein512-192': 0xb338,\n  'skein512-200': 0xb339,\n  'skein512-208': 0xb33a,\n  'skein512-216': 0xb33b,\n  'skein512-224': 0xb33c,\n  'skein512-232': 0xb33d,\n  'skein512-240': 0xb33e,\n  'skein512-248': 0xb33f,\n  'skein512-256': 0xb340,\n  'skein512-264': 0xb341,\n  'skein512-272': 0xb342,\n  'skein512-280': 0xb343,\n  'skein512-288': 0xb344,\n  'skein512-296': 0xb345,\n  'skein512-304': 0xb346,\n  'skein512-312': 0xb347,\n  'skein512-320': 0xb348,\n  'skein512-328': 0xb349,\n  'skein512-336': 0xb34a,\n  'skein512-344': 0xb34b,\n  'skein512-352': 0xb34c,\n  'skein512-360': 0xb34d,\n  'skein512-368': 0xb34e,\n  'skein512-376': 0xb34f,\n  'skein512-384': 0xb350,\n  'skein512-392': 0xb351,\n  'skein512-400': 0xb352,\n  'skein512-408': 0xb353,\n  'skein512-416': 0xb354,\n  'skein512-424': 0xb355,\n  'skein512-432': 0xb356,\n  'skein512-440': 0xb357,\n  'skein512-448': 0xb358,\n  'skein512-456': 0xb359,\n  'skein512-464': 0xb35a,\n  'skein512-472': 0xb35b,\n  'skein512-480': 0xb35c,\n  'skein512-488': 0xb35d,\n  'skein512-496': 0xb35e,\n  'skein512-504': 0xb35f,\n  'skein512-512': 0xb360,\n  'skein1024-8': 0xb361,\n  'skein1024-16': 0xb362,\n  'skein1024-24': 0xb363,\n  'skein1024-32': 0xb364,\n  'skein1024-40': 0xb365,\n  'skein1024-48': 0xb366,\n  'skein1024-56': 0xb367,\n  'skein1024-64': 0xb368,\n  'skein1024-72': 0xb369,\n  'skein1024-80': 0xb36a,\n  'skein1024-88': 0xb36b,\n  'skein1024-96': 0xb36c,\n  'skein1024-104': 0xb36d,\n  'skein1024-112': 0xb36e,\n  'skein1024-120': 0xb36f,\n  'skein1024-128': 0xb370,\n  'skein1024-136': 0xb371,\n  'skein1024-144': 0xb372,\n  'skein1024-152': 0xb373,\n  'skein1024-160': 0xb374,\n  'skein1024-168': 0xb375,\n  'skein1024-176': 0xb376,\n  'skein1024-184': 0xb377,\n  'skein1024-192': 0xb378,\n  'skein1024-200': 0xb379,\n  'skein1024-208': 0xb37a,\n  'skein1024-216': 0xb37b,\n  'skein1024-224': 0xb37c,\n  'skein1024-232': 0xb37d,\n  'skein1024-240': 0xb37e,\n  'skein1024-248': 0xb37f,\n  'skein1024-256': 0xb380,\n  'skein1024-264': 0xb381,\n  'skein1024-272': 0xb382,\n  'skein1024-280': 0xb383,\n  'skein1024-288': 0xb384,\n  'skein1024-296': 0xb385,\n  'skein1024-304': 0xb386,\n  'skein1024-312': 0xb387,\n  'skein1024-320': 0xb388,\n  'skein1024-328': 0xb389,\n  'skein1024-336': 0xb38a,\n  'skein1024-344': 0xb38b,\n  'skein1024-352': 0xb38c,\n  'skein1024-360': 0xb38d,\n  'skein1024-368': 0xb38e,\n  'skein1024-376': 0xb38f,\n  'skein1024-384': 0xb390,\n  'skein1024-392': 0xb391,\n  'skein1024-400': 0xb392,\n  'skein1024-408': 0xb393,\n  'skein1024-416': 0xb394,\n  'skein1024-424': 0xb395,\n  'skein1024-432': 0xb396,\n  'skein1024-440': 0xb397,\n  'skein1024-448': 0xb398,\n  'skein1024-456': 0xb399,\n  'skein1024-464': 0xb39a,\n  'skein1024-472': 0xb39b,\n  'skein1024-480': 0xb39c,\n  'skein1024-488': 0xb39d,\n  'skein1024-496': 0xb39e,\n  'skein1024-504': 0xb39f,\n  'skein1024-512': 0xb3a0,\n  'skein1024-520': 0xb3a1,\n  'skein1024-528': 0xb3a2,\n  'skein1024-536': 0xb3a3,\n  'skein1024-544': 0xb3a4,\n  'skein1024-552': 0xb3a5,\n  'skein1024-560': 0xb3a6,\n  'skein1024-568': 0xb3a7,\n  'skein1024-576': 0xb3a8,\n  'skein1024-584': 0xb3a9,\n  'skein1024-592': 0xb3aa,\n  'skein1024-600': 0xb3ab,\n  'skein1024-608': 0xb3ac,\n  'skein1024-616': 0xb3ad,\n  'skein1024-624': 0xb3ae,\n  'skein1024-632': 0xb3af,\n  'skein1024-640': 0xb3b0,\n  'skein1024-648': 0xb3b1,\n  'skein1024-656': 0xb3b2,\n  'skein1024-664': 0xb3b3,\n  'skein1024-672': 0xb3b4,\n  'skein1024-680': 0xb3b5,\n  'skein1024-688': 0xb3b6,\n  'skein1024-696': 0xb3b7,\n  'skein1024-704': 0xb3b8,\n  'skein1024-712': 0xb3b9,\n  'skein1024-720': 0xb3ba,\n  'skein1024-728': 0xb3bb,\n  'skein1024-736': 0xb3bc,\n  'skein1024-744': 0xb3bd,\n  'skein1024-752': 0xb3be,\n  'skein1024-760': 0xb3bf,\n  'skein1024-768': 0xb3c0,\n  'skein1024-776': 0xb3c1,\n  'skein1024-784': 0xb3c2,\n  'skein1024-792': 0xb3c3,\n  'skein1024-800': 0xb3c4,\n  'skein1024-808': 0xb3c5,\n  'skein1024-816': 0xb3c6,\n  'skein1024-824': 0xb3c7,\n  'skein1024-832': 0xb3c8,\n  'skein1024-840': 0xb3c9,\n  'skein1024-848': 0xb3ca,\n  'skein1024-856': 0xb3cb,\n  'skein1024-864': 0xb3cc,\n  'skein1024-872': 0xb3cd,\n  'skein1024-880': 0xb3ce,\n  'skein1024-888': 0xb3cf,\n  'skein1024-896': 0xb3d0,\n  'skein1024-904': 0xb3d1,\n  'skein1024-912': 0xb3d2,\n  'skein1024-920': 0xb3d3,\n  'skein1024-928': 0xb3d4,\n  'skein1024-936': 0xb3d5,\n  'skein1024-944': 0xb3d6,\n  'skein1024-952': 0xb3d7,\n  'skein1024-960': 0xb3d8,\n  'skein1024-968': 0xb3d9,\n  'skein1024-976': 0xb3da,\n  'skein1024-984': 0xb3db,\n  'skein1024-992': 0xb3dc,\n  'skein1024-1000': 0xb3dd,\n  'skein1024-1008': 0xb3de,\n  'skein1024-1016': 0xb3df,\n  'skein1024-1024': 0xb3e0,\n  'poseidon-bls12_381-a2-fc1': 0xb401,\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402\n})\n\nmodule.exports = { names }\n","/**\n * Multihash implementation in JavaScript.\n */\n'use strict'\n\nconst multibase = require('multibase')\nconst varint = require('varint')\nconst { names } = require('./constants')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayConcat = require('uint8arrays/concat')\n\nconst codes = /** @type {import('./types').CodeNameMap} */({})\n\n// eslint-disable-next-line guard-for-in\nfor (const key in names) {\n  const name = /** @type {HashName} */(key)\n  codes[names[name]] = name\n}\nObject.freeze(codes)\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nfunction toHexString (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return uint8ArrayToString(hash, 'base16')\n}\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Uint8Array}\n */\nfunction fromHexString (hash) {\n  return uint8ArrayFromString(hash, 'base16')\n}\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nfunction toB58String (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return uint8ArrayToString(multibase.encode('base58btc', hash)).slice(1)\n}\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Uint8Array} hash\n * @returns {Uint8Array}\n */\nfunction fromB58String (hash) {\n  const encoded = hash instanceof Uint8Array\n    ? uint8ArrayToString(hash)\n    : hash\n\n  return multibase.decode('z' + encoded)\n}\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Uint8Array} bytes\n * @returns {{code: HashCode, name: HashName, length: number, digest: Uint8Array}} result\n */\nfunction decode (bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new Error('multihash must be a Uint8Array')\n  }\n\n  if (bytes.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.')\n  }\n\n  const code = /** @type {HashCode} */(varint.decode(bytes))\n  if (!isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n  bytes = bytes.slice(varint.decode.bytes)\n\n  const len = varint.decode(bytes)\n  if (len < 0) {\n    throw new Error(`multihash invalid length: ${len}`)\n  }\n  bytes = bytes.slice(varint.decode.bytes)\n\n  if (bytes.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${uint8ArrayToString(bytes, 'base16')}`)\n  }\n\n  return {\n    code,\n    name: codes[code],\n    length: len,\n    digest: bytes\n  }\n}\n\n/**\n * Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Uint8Array} digest\n * @param {HashName | HashCode} code\n * @param {number} [length]\n * @returns {Uint8Array}\n */\nfunction encode (digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = coerceCode(code)\n\n  if (!(digest instanceof Uint8Array)) {\n    throw new Error('digest should be a Uint8Array')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  const hash = varint.encode(hashfn)\n  const len = varint.encode(length)\n  return uint8ArrayConcat([hash, len, digest], hash.length + len.length + digest.length)\n}\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n *\n * @param {HashName | number} name\n * @returns {number}\n */\nfunction coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (names[name] === undefined) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  // @ts-ignore\n  if (codes[code] === undefined && !isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n/**\n * Checks if a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction isAppCode (code) {\n  return code > 0 && code < 0x10\n}\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {HashCode} code\n * @returns {boolean}\n */\nfunction isValidCode (code) {\n  if (isAppCode(code)) {\n    return true\n  }\n\n  if (codes[code]) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {void}\n * @throws {Error}\n */\nfunction validate (multihash) {\n  decode(multihash) // throws if bad.\n}\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n * @throws {Error}\n */\nfunction prefix (multihash) {\n  validate(multihash)\n\n  return multihash.subarray(0, 2)\n}\n\nmodule.exports = {\n  names,\n  codes,\n  toHexString,\n  fromHexString,\n  toB58String,\n  fromB58String,\n  decode,\n  encode,\n  coerceCode,\n  isAppCode,\n  validate,\n  prefix,\n  isValidCode\n}\n\n/**\n * @typedef { import(\"./constants\").HashCode } HashCode\n * @typedef { import(\"./constants\").HashName } HashName\n */\n","'use strict'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n *\n * @param {Array<ArrayLike<number>>} arrays\n * @param {number} [length]\n */\nfunction concat (arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = concat\n","'use strict'\n\n/**\n * Returns true if the two passed Uint8Arrays have the same content\n *\n * @param {Uint8Array} a\n * @param {Uint8Array} b\n */\nfunction equals (a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (a.byteLength !== b.byteLength) {\n    return false\n  }\n\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nmodule.exports = equals\n","'use strict'\n\nconst { encoding: getCodec } = require('multibase')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * @typedef {import('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\n */\n\n/**\n * Interprets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {string} string - The string to turn into an array\n */\nfunction asciiStringToUint8Array (string) {\n  const array = new Uint8Array(string.length)\n\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i)\n  }\n\n  return array\n}\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string)\n  }\n\n  return getCodec(encoding).decode(string)\n}\n\nmodule.exports = fromString\n","'use strict'\n\nconst { encoding: getCodec } = require('multibase')\nconst utf8Decoder = new TextDecoder('utf8')\n\n/**\n * @typedef {import('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\n */\n\n/**\n * Turns a Uint8Array of bytes into a string with each\n * character being the char code of the corresponding byte\n *\n * @param {Uint8Array} array - The array to turn into a string\n */\nfunction uint8ArrayToAsciiString (array) {\n  let string = ''\n\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i])\n  }\n  return string\n}\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\nfunction toString (array, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array)\n  }\n\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array)\n  }\n\n  return getCodec(encoding).encode(array)\n}\n\nmodule.exports = toString\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import isIPFS from \"is-ipfs\";\n\nclass IpfsGatewayTools {\n  constructor() {}\n\n  containsCID = (url) => {\n    if (typeof url !== \"string\") {\n      throw new Error(\"url is not string\");\n    }\n    const splitUrl = url.split(\"/\");\n    for (const split of splitUrl) {\n      if (isIPFS.cid(split)) {\n        return {\n          containsCid: true,\n          cid: split,\n        };\n      }\n    }\n    return {\n      containsCid: false,\n      cid: null,\n    };\n  };\n\n  //gets\n  convertToDesiredGateway = (sourceUrl, desiredGatewayPrefix) => {\n    const results = this.containsCID(sourceUrl);\n    if (results.containsCid !== true) {\n      throw new Error(\"url does not contain CID\");\n    }\n\n    const splitUrl = sourceUrl.split(results.cid);\n    //case 1 - the ipfs://cid path\n    if (sourceUrl.includes(`ipfs://${results.cid}`)) {\n      return `${desiredGatewayPrefix}/ipfs/${results.cid}${splitUrl[1]}`;\n    }\n\n    //case 2 - the /ipfs/cid path (this should cover ipfs://ipfs/cid as well\n    if (sourceUrl.includes(`/ipfs/${results.cid}`)) {\n      return `${desiredGatewayPrefix}/ipfs/${results.cid}${splitUrl[1]}`;\n    }\n\n    //case 3 - the /ipns/cid path\n    if (sourceUrl.includes(`/ipns/${results.cid}`)) {\n      return `${desiredGatewayPrefix}/ipns/${results.cid}${splitUrl[1]}`;\n    }\n\n    //this is the fallback if no supported patterns are provided\n    throw new Error(\n      \"unsupported URL pattern, please submit a github issue with the URL utilized\"\n    );\n  };\n}\n\nexport default IpfsGatewayTools;\n"],"sourceRoot":""}